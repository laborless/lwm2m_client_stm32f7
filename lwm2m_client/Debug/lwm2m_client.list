
lwm2m_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080076d8  080076d8  000176d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d0  080077d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080077d0  080077d0  000177d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077d8  080077d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080077e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020310  20000078  08007858  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20020388  08007858  00020388  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187c4  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000353c  00000000  00000000  0003886a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001228  00000000  00000000  0003bda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  0003cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bbfe  00000000  00000000  0003e060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd67  00000000  00000000  00069c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010d2c5  00000000  00000000  000799c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00186c8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f0c  00000000  00000000  00186d08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	080076c0 	.word	0x080076c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	080076c0 	.word	0x080076c0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000544:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000548:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <SCB_EnableICache+0x3c>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000558:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <SCB_EnableICache+0x3c>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <SCB_EnableICache+0x3c>)
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000568:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800056c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <SCB_EnableDCache+0x7c>)
 8000588:	2200      	movs	r2, #0
 800058a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800058e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <SCB_EnableDCache+0x7c>)
 8000594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000598:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	0b5b      	lsrs	r3, r3, #13
 800059e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005a2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	08db      	lsrs	r3, r3, #3
 80005a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005ac:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	015a      	lsls	r2, r3, #5
 80005b2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005b6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005bc:	490f      	ldr	r1, [pc, #60]	; (80005fc <SCB_EnableDCache+0x7c>)
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1ef      	bne.n	80005ae <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60fa      	str	r2, [r7, #12]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1e5      	bne.n	80005a4 <SCB_EnableDCache+0x24>
 80005d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <SCB_EnableDCache+0x7c>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <SCB_EnableDCache+0x7c>)
 80005e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005e6:	6153      	str	r3, [r2, #20]
 80005e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005ec:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00a      	beq.n	8000628 <_write+0x28>
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d007      	beq.n	8000628 <_write+0x28>
   {
      errno = EBADF;
 8000618:	f006 fbac 	bl	8006d74 <__errno>
 800061c:	4602      	mov	r2, r0
 800061e:	2309      	movs	r3, #9
 8000620:	6013      	str	r3, [r2, #0]
      return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e00e      	b.n	8000646 <_write+0x46>
   }

   HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len,100);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	b29a      	uxth	r2, r3
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	68b9      	ldr	r1, [r7, #8]
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <_write+0x50>)
 8000632:	f003 fa07 	bl	8003a44 <HAL_UART_Transmit>
 8000636:	4603      	mov	r3, r0
 8000638:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 800063a:	7dfb      	ldrb	r3, [r7, #23]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d101      	bne.n	8000644 <_write+0x44>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	e000      	b.n	8000646 <_write+0x46>
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20020208 	.word	0x20020208

08000654 <Task1>:

void Task1(void * pvParameter)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("task1 started\r\n");
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <Task1+0x20>)
 800065e:	f006 fc23 	bl	8006ea8 <puts>

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(500/portTICK_PERIOD_MS);
 8000662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000666:	f004 ff23 	bl	80054b0 <vTaskDelay>
	  printf("task1 print\r\n");
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <Task1+0x24>)
 800066c:	f006 fc1c 	bl	8006ea8 <puts>
	  vTaskDelay(500/portTICK_PERIOD_MS);
 8000670:	e7f7      	b.n	8000662 <Task1+0xe>
 8000672:	bf00      	nop
 8000674:	080076d8 	.word	0x080076d8
 8000678:	080076e8 	.word	0x080076e8

0800067c <Task2>:
  }
  /* USER CODE END 5 */
}
void Task2(void * pvParameter)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("task2 started\r\n");
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <Task2+0x20>)
 8000686:	f006 fc0f 	bl	8006ea8 <puts>

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(1000/portTICK_PERIOD_MS);
 800068a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068e:	f004 ff0f 	bl	80054b0 <vTaskDelay>
	  printf("task2 print\r\n");
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <Task2+0x24>)
 8000694:	f006 fc08 	bl	8006ea8 <puts>
	  vTaskDelay(1000/portTICK_PERIOD_MS);
 8000698:	e7f7      	b.n	800068a <Task2+0xe>
 800069a:	bf00      	nop
 800069c:	080076f8 	.word	0x080076f8
 80006a0:	08007708 	.word	0x08007708

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006aa:	f7ff ff49 	bl	8000540 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006ae:	f7ff ff67 	bl	8000580 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fc75 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f837 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f9b7 	bl	8000a2c <MX_GPIO_Init>
  MX_ETH_Init();
 80006be:	f000 f8dd 	bl	800087c <MX_ETH_Init>
  MX_LPTIM1_Init();
 80006c2:	f000 f923 	bl	800090c <MX_LPTIM1_Init>
  MX_RNG_Init();
 80006c6:	f000 f947 	bl	8000958 <MX_RNG_Init>
  MX_RTC_Init();
 80006ca:	f000 f959 	bl	8000980 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80006ce:	f000 f97d 	bl	80009cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("LwM2M Client !!\r\n");
 80006d2:	480f      	ldr	r0, [pc, #60]	; (8000710 <main+0x6c>)
 80006d4:	f006 fbe8 	bl	8006ea8 <puts>
  HAL_LPTIM_Counter_Start_IT(&hlptim1,32);
 80006d8:	2120      	movs	r1, #32
 80006da:	480e      	ldr	r0, [pc, #56]	; (8000714 <main+0x70>)
 80006dc:	f001 fd38 	bl	8002150 <HAL_LPTIM_Counter_Start_IT>

  xTaskCreate (Task1, "TASK1", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
 80006e0:	2300      	movs	r3, #0
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	2305      	movs	r3, #5
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2300      	movs	r3, #0
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	490a      	ldr	r1, [pc, #40]	; (8000718 <main+0x74>)
 80006ee:	480b      	ldr	r0, [pc, #44]	; (800071c <main+0x78>)
 80006f0:	f004 fd9a 	bl	8005228 <xTaskCreate>
  xTaskCreate (Task2, "TASK2", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 80006f4:	2300      	movs	r3, #0
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	2304      	movs	r3, #4
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	4907      	ldr	r1, [pc, #28]	; (8000720 <main+0x7c>)
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <main+0x80>)
 8000704:	f004 fd90 	bl	8005228 <xTaskCreate>
  vTaskStartScheduler();
 8000708:	f004 ff08 	bl	800551c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x68>
 800070e:	bf00      	nop
 8000710:	08007718 	.word	0x08007718
 8000714:	20020288 	.word	0x20020288
 8000718:	0800772c 	.word	0x0800772c
 800071c:	08000655 	.word	0x08000655
 8000720:	08007734 	.word	0x08007734
 8000724:	0800067d 	.word	0x0800067d

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0b8      	sub	sp, #224	; 0xe0
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000732:	2234      	movs	r2, #52	; 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 fb51 	bl	8006dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2290      	movs	r2, #144	; 0x90
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f006 fb42 	bl	8006dde <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800075a:	f001 ff4d 	bl	80025f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800075e:	4b44      	ldr	r3, [pc, #272]	; (8000870 <SystemClock_Config+0x148>)
 8000760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000762:	4a43      	ldr	r2, [pc, #268]	; (8000870 <SystemClock_Config+0x148>)
 8000764:	f023 0318 	bic.w	r3, r3, #24
 8000768:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b41      	ldr	r3, [pc, #260]	; (8000870 <SystemClock_Config+0x148>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a40      	ldr	r2, [pc, #256]	; (8000870 <SystemClock_Config+0x148>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b3e      	ldr	r3, [pc, #248]	; (8000870 <SystemClock_Config+0x148>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <SystemClock_Config+0x14c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078a:	4a3a      	ldr	r2, [pc, #232]	; (8000874 <SystemClock_Config+0x14c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <SystemClock_Config+0x14c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800079e:	230e      	movs	r3, #14
 80007a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007b6:	2301      	movs	r3, #1
 80007b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007ce:	2360      	movs	r3, #96	; 0x60
 80007d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007da:	2304      	movs	r3, #4
 80007dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 ff67 	bl	80026b8 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007f0:	f000 f958 	bl	8000aa4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f4:	f001 ff10 	bl	8002618 <HAL_PWREx_EnableOverDrive>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007fe:	f000 f951 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000822:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000826:	2103      	movs	r1, #3
 8000828:	4618      	mov	r0, r3
 800082a:	f002 f9f3 	bl	8002c14 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000834:	f000 f936 	bl	8000aa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <SystemClock_Config+0x150>)
 800083a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000842:	2300      	movs	r3, #0
 8000844:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800084a:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fbae 	bl	8002fb8 <HAL_RCCEx_PeriphCLKConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8000862:	f000 f91f 	bl	8000aa4 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	37e0      	adds	r7, #224	; 0xe0
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000
 8000878:	00240120 	.word	0x00240120

0800087c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000880:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_ETH_Init+0x88>)
 8000882:	4a21      	ldr	r2, [pc, #132]	; (8000908 <MX_ETH_Init+0x8c>)
 8000884:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_ETH_Init+0x88>)
 8000888:	2201      	movs	r2, #1
 800088a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_ETH_Init+0x88>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_ETH_Init+0x88>)
 8000896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800089a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_ETH_Init+0x88>)
 800089e:	2201      	movs	r2, #1
 80008a0:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_ETH_Init+0x88>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_ETH_Init+0x88>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	3301      	adds	r3, #1
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_ETH_Init+0x88>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	3302      	adds	r3, #2
 80008ba:	22e1      	movs	r2, #225	; 0xe1
 80008bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_ETH_Init+0x88>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	3303      	adds	r3, #3
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_ETH_Init+0x88>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	3304      	adds	r3, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_ETH_Init+0x88>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	3305      	adds	r3, #5
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_ETH_Init+0x88>)
 80008de:	2201      	movs	r2, #1
 80008e0:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_ETH_Init+0x88>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_ETH_Init+0x88>)
 80008ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ee:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_ETH_Init+0x88>)
 80008f2:	f000 fd11 	bl	8001318 <HAL_ETH_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ETH_Init+0x84>
  {
    Error_Handler();
 80008fc:	f000 f8d2 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200202e8 	.word	0x200202e8
 8000908:	40028000 	.word	0x40028000

0800090c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_LPTIM1_Init+0x44>)
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <MX_LPTIM1_Init+0x48>)
 8000914:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_LPTIM1_Init+0x44>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_LPTIM1_Init+0x44>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_LPTIM1_Init+0x44>)
 8000924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000928:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_LPTIM1_Init+0x44>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_LPTIM1_Init+0x44>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_LPTIM1_Init+0x44>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_LPTIM1_Init+0x44>)
 800093e:	f001 fb87 	bl	8002050 <HAL_LPTIM_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 8000948:	f000 f8ac 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20020288 	.word	0x20020288
 8000954:	40002400 	.word	0x40002400

08000958 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_RNG_Init+0x20>)
 800095e:	4a07      	ldr	r2, [pc, #28]	; (800097c <MX_RNG_Init+0x24>)
 8000960:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_RNG_Init+0x20>)
 8000964:	f002 ff4e 	bl	8003804 <HAL_RNG_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800096e:	f000 f899 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200202d8 	.word	0x200202d8
 800097c:	50060800 	.word	0x50060800

08000980 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_RTC_Init+0x44>)
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <MX_RTC_Init+0x48>)
 8000988:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_RTC_Init+0x44>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_RTC_Init+0x44>)
 8000992:	227f      	movs	r2, #127	; 0x7f
 8000994:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_RTC_Init+0x44>)
 8000998:	22ff      	movs	r2, #255	; 0xff
 800099a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_RTC_Init+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_RTC_Init+0x44>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_RTC_Init+0x44>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_RTC_Init+0x44>)
 80009b0:	f002 ff52 	bl	8003858 <HAL_RTC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80009ba:	f000 f873 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200202b8 	.word	0x200202b8
 80009c8:	40002800 	.word	0x40002800

080009cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <MX_USART3_UART_Init+0x5c>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 8000a10:	f002 ffca 	bl	80039a8 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 f843 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20020208 	.word	0x20020208
 8000a28:	40004800 	.word	0x40004800

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_GPIO_Init+0x74>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <Error_Handler+0x6>

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a44      	ldr	r2, [pc, #272]	; (8000c24 <HAL_ETH_MspInit+0x130>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	f040 8081 	bne.w	8000c1a <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b18:	4b43      	ldr	r3, [pc, #268]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a42      	ldr	r2, [pc, #264]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b2c:	623b      	str	r3, [r7, #32]
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a3c      	ldr	r2, [pc, #240]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a36      	ldr	r2, [pc, #216]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
 8000b54:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <HAL_ETH_MspInit+0x134>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ba8:	2332      	movs	r3, #50	; 0x32
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481a      	ldr	r0, [pc, #104]	; (8000c2c <HAL_ETH_MspInit+0x138>)
 8000bc4:	f001 f89a 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bc8:	2386      	movs	r3, #134	; 0x86
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd8:	230b      	movs	r3, #11
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4813      	ldr	r0, [pc, #76]	; (8000c30 <HAL_ETH_MspInit+0x13c>)
 8000be4:	f001 f88a 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000be8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_ETH_MspInit+0x140>)
 8000c06:	f001 f879 	bl	8001cfc <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	203d      	movs	r0, #61	; 0x3d
 8000c10:	f000 fb29 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000c14:	203d      	movs	r0, #61	; 0x3d
 8000c16:	f000 fb42 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	; 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40028000 	.word	0x40028000
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40021800 	.word	0x40021800

08000c38 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <HAL_LPTIM_MspInit+0x44>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d113      	bne.n	8000c72 <HAL_LPTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_LPTIM_MspInit+0x48>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <HAL_LPTIM_MspInit+0x48>)
 8000c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_LPTIM_MspInit+0x48>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	205d      	movs	r0, #93	; 0x5d
 8000c68:	f000 fafd 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000c6c:	205d      	movs	r0, #93	; 0x5d
 8000c6e:	f000 fb16 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40002400 	.word	0x40002400
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_RNG_MspInit+0x38>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10b      	bne.n	8000cae <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_RNG_MspInit+0x3c>)
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <HAL_RNG_MspInit+0x3c>)
 8000c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_RNG_MspInit+0x3c>)
 8000ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	50060800 	.word	0x50060800
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_RTC_MspInit+0x2c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d105      	bne.n	8000ce2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_RTC_MspInit+0x30>)
 8000cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_RTC_MspInit+0x30>)
 8000cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40002800 	.word	0x40002800
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <HAL_UART_MspInit+0x8c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d130      	bne.n	8000d7c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_UART_MspInit+0x90>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <HAL_UART_MspInit+0x90>)
 8000d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_UART_MspInit+0x90>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_UART_MspInit+0x90>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_UART_MspInit+0x90>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_UART_MspInit+0x90>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4809      	ldr	r0, [pc, #36]	; (8000d8c <HAL_UART_MspInit+0x94>)
 8000d68:	f000 ffc8 	bl	8001cfc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2027      	movs	r0, #39	; 0x27
 8000d72:	f000 fa78 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d76:	2027      	movs	r0, #39	; 0x27
 8000d78:	f000 fa91 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40004800 	.word	0x40004800
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020c00 	.word	0x40020c00

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f934 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <USART3_IRQHandler+0x10>)
 8000dce:	f002 fecb 	bl	8003b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20020208 	.word	0x20020208

08000ddc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <ETH_IRQHandler+0x10>)
 8000de2:	f000 fc35 	bl	8001650 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200202e8 	.word	0x200202e8

08000df0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <LPTIM1_IRQHandler+0x1c>)
 8000df6:	f001 fa21 	bl	800223c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dfa:	f004 ff89 	bl	8005d10 <xTaskGetSchedulerState>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d001      	beq.n	8000e08 <LPTIM1_IRQHandler+0x18>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e04:	f005 fd20 	bl	8006848 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20020288 	.word	0x20020288

08000e10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e00a      	b.n	8000e38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e22:	f3af 8000 	nop.w
 8000e26:	4601      	mov	r1, r0
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	60ba      	str	r2, [r7, #8]
 8000e2e:	b2ca      	uxtb	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf0      	blt.n	8000e22 <_read+0x12>
	}

return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e72:	605a      	str	r2, [r3, #4]
	return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_isatty>:

int _isatty(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f005 ff46 	bl	8006d74 <__errno>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	230c      	movs	r3, #12
 8000eec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20080000 	.word	0x20080000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	20000094 	.word	0x20000094
 8000f1c:	20020388 	.word	0x20020388

08000f20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <SystemInit+0x28>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <SystemInit+0x28>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SystemInit+0x28>)
 8000f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f52:	e003      	b.n	8000f5c <LoopCopyDataInit>

08000f54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f5a:	3104      	adds	r1, #4

08000f5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f64:	d3f6      	bcc.n	8000f54 <CopyDataInit>
  ldr  r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f68:	e002      	b.n	8000f70 <LoopFillZerobss>

08000f6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f6c:	f842 3b04 	str.w	r3, [r2], #4

08000f70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f74:	d3f9      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd3 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f005 ff01 	bl	8006d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fb91 	bl	80006a4 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000f88:	080077e0 	.word	0x080077e0
  ldr  r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f90:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000f94:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000f98:	20020388 	.word	0x20020388

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x28>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x28>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f94d 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fd76 	bl	8000aac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f965 	bl	80012ba <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f92d 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	20020330 	.word	0x20020330

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20020330 	.word	0x20020330

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000008 	.word	0x20000008

080010b0 <__NVIC_SetPriorityGrouping>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <__NVIC_SetPriorityGrouping+0x40>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x40>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00
 80010f4:	05fa0000 	.word	0x05fa0000

080010f8 <__NVIC_GetPriorityGrouping>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff29 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff3e 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff31 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d004      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e00c      	b.n	800130a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2205      	movs	r2, #5
 80012f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001328:	4ba9      	ldr	r3, [pc, #676]	; (80015d0 <HAL_ETH_Init+0x2b8>)
 800132a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e183      	b.n	8001646 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fbce 	bl	8000af4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001358:	4b9e      	ldr	r3, [pc, #632]	; (80015d4 <HAL_ETH_Init+0x2bc>)
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	4a9d      	ldr	r2, [pc, #628]	; (80015d4 <HAL_ETH_Init+0x2bc>)
 800135e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001362:	6453      	str	r3, [r2, #68]	; 0x44
 8001364:	4b9b      	ldr	r3, [pc, #620]	; (80015d4 <HAL_ETH_Init+0x2bc>)
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001370:	4b99      	ldr	r3, [pc, #612]	; (80015d8 <HAL_ETH_Init+0x2c0>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a98      	ldr	r2, [pc, #608]	; (80015d8 <HAL_ETH_Init+0x2c0>)
 8001376:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800137a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800137c:	4b96      	ldr	r3, [pc, #600]	; (80015d8 <HAL_ETH_Init+0x2c0>)
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4994      	ldr	r1, [pc, #592]	; (80015d8 <HAL_ETH_Init+0x2c0>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013a2:	f7ff fe57 	bl	8001054 <HAL_GetTick>
 80013a6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013a8:	e011      	b.n	80013ce <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80013aa:	f7ff fe53 	bl	8001054 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b8:	d909      	bls.n	80013ce <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e13b      	b.n	8001646 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e4      	bne.n	80013aa <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f023 031c 	bic.w	r3, r3, #28
 80013ee:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013f0:	f001 fdae 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 80013f4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4a78      	ldr	r2, [pc, #480]	; (80015dc <HAL_ETH_Init+0x2c4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d908      	bls.n	8001410 <HAL_ETH_Init+0xf8>
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4a77      	ldr	r2, [pc, #476]	; (80015e0 <HAL_ETH_Init+0x2c8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d804      	bhi.n	8001410 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e027      	b.n	8001460 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	4a73      	ldr	r2, [pc, #460]	; (80015e0 <HAL_ETH_Init+0x2c8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d908      	bls.n	800142a <HAL_ETH_Init+0x112>
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	4a72      	ldr	r2, [pc, #456]	; (80015e4 <HAL_ETH_Init+0x2cc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d804      	bhi.n	800142a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f043 030c 	orr.w	r3, r3, #12
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	e01a      	b.n	8001460 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4a6d      	ldr	r2, [pc, #436]	; (80015e4 <HAL_ETH_Init+0x2cc>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d903      	bls.n	800143a <HAL_ETH_Init+0x122>
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4a6c      	ldr	r2, [pc, #432]	; (80015e8 <HAL_ETH_Init+0x2d0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d911      	bls.n	800145e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4a6a      	ldr	r2, [pc, #424]	; (80015e8 <HAL_ETH_Init+0x2d0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d908      	bls.n	8001454 <HAL_ETH_Init+0x13c>
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4a69      	ldr	r2, [pc, #420]	; (80015ec <HAL_ETH_Init+0x2d4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d804      	bhi.n	8001454 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e005      	b.n	8001460 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	e000      	b.n	8001460 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800145e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800146c:	2100      	movs	r1, #0
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f9db 	bl	800182a <HAL_ETH_WritePHYRegister>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800147e:	6939      	ldr	r1, [r7, #16]
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fa39 	bl	80018f8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0d9      	b.n	8001646 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001492:	20ff      	movs	r0, #255	; 0xff
 8001494:	f7ff fdea 	bl	800106c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a7 	beq.w	80015f0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014a2:	f7ff fdd7 	bl	8001054 <HAL_GetTick>
 80014a6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	461a      	mov	r2, r3
 80014ae:	2101      	movs	r1, #1
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f952 	bl	800175a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014b6:	f7ff fdcd 	bl	8001054 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d90f      	bls.n	80014e8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014cc:	6939      	ldr	r1, [r7, #16]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fa12 	bl	80018f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0ae      	b.n	8001646 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0da      	beq.n	80014a8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f6:	2100      	movs	r1, #0
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f996 	bl	800182a <HAL_ETH_WritePHYRegister>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00b      	beq.n	800151c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001508:	6939      	ldr	r1, [r7, #16]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f9f4 	bl	80018f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001518:	2301      	movs	r3, #1
 800151a:	e094      	b.n	8001646 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800151c:	f7ff fd9a 	bl	8001054 <HAL_GetTick>
 8001520:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	461a      	mov	r2, r3
 8001528:	2101      	movs	r1, #1
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f915 	bl	800175a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001530:	f7ff fd90 	bl	8001054 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d90f      	bls.n	8001562 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001546:	6939      	ldr	r1, [r7, #16]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f9d5 	bl	80018f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e071      	b.n	8001646 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0da      	beq.n	8001522 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	461a      	mov	r2, r3
 8001572:	211f      	movs	r1, #31
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f8f0 	bl	800175a <HAL_ETH_ReadPHYRegister>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00b      	beq.n	8001598 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001584:	6939      	ldr	r1, [r7, #16]
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f9b6 	bl	80018f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001594:	2301      	movs	r3, #1
 8001596:	e056      	b.n	8001646 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	e002      	b.n	80015b2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	e037      	b.n	8001634 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	e032      	b.n	8001634 <HAL_ETH_Init+0x31c>
 80015ce:	bf00      	nop
 80015d0:	03938700 	.word	0x03938700
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	01312cff 	.word	0x01312cff
 80015e0:	02160ebf 	.word	0x02160ebf
 80015e4:	039386ff 	.word	0x039386ff
 80015e8:	05f5e0ff 	.word	0x05f5e0ff
 80015ec:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001600:	4313      	orrs	r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	2100      	movs	r1, #0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f90e 	bl	800182a <HAL_ETH_WritePHYRegister>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00b      	beq.n	800162c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001618:	6939      	ldr	r1, [r7, #16]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f96c 	bl	80018f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e00c      	b.n	8001646 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800162c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001630:	f7ff fd1c 	bl	800106c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001634:	6939      	ldr	r1, [r7, #16]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f95e 	bl	80018f8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop

08001650 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001660:	4413      	add	r3, r2
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	2b40      	cmp	r3, #64	; 0x40
 800166a:	d112      	bne.n	8001692 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f860 	bl	8001732 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f241 0314 	movw	r3, #4116	; 0x1014
 800167a:	4413      	add	r3, r2
 800167c:	2240      	movs	r2, #64	; 0x40
 800167e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001690:	e01b      	b.n	80016ca <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	f241 0314 	movw	r3, #4116	; 0x1014
 800169a:	4413      	add	r3, r2
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d111      	bne.n	80016ca <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f839 	bl	800171e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80016b4:	4413      	add	r3, r2
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80016d2:	4413      	add	r3, r2
 80016d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f241 0314 	movw	r3, #4116	; 0x1014
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ee:	d112      	bne.n	8001716 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f828 	bl	8001746 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f241 0314 	movw	r3, #4116	; 0x1014
 80016fe:	4413      	add	r3, r2
 8001700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001704:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	460b      	mov	r3, r1
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b82      	cmp	r3, #130	; 0x82
 800177a:	d101      	bne.n	8001780 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800177c:	2302      	movs	r3, #2
 800177e:	e050      	b.n	8001822 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2282      	movs	r2, #130	; 0x82
 8001784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 031c 	and.w	r3, r3, #28
 8001796:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8a1b      	ldrh	r3, [r3, #16]
 800179c:	02db      	lsls	r3, r3, #11
 800179e:	b29b      	uxth	r3, r3
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	019b      	lsls	r3, r3, #6
 80017aa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f023 0302 	bic.w	r3, r3, #2
 80017ba:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017cc:	f7ff fc42 	bl	8001054 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017d2:	e015      	b.n	8001800 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80017d4:	f7ff fc3e 	bl	8001054 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e2:	d309      	bcc.n	80017f8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e014      	b.n	8001822 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e4      	bne.n	80017d4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	b29b      	uxth	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	460b      	mov	r3, r1
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b42      	cmp	r3, #66	; 0x42
 800184a:	d101      	bne.n	8001850 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
 800184e:	e04e      	b.n	80018ee <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2242      	movs	r2, #66	; 0x42
 8001854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 031c 	and.w	r3, r3, #28
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8a1b      	ldrh	r3, [r3, #16]
 800186c:	02db      	lsls	r3, r3, #11
 800186e:	b29b      	uxth	r3, r3
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4313      	orrs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	019b      	lsls	r3, r3, #6
 800187a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018a6:	f7ff fbd5 	bl	8001054 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018ac:	e015      	b.n	80018da <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80018ae:	f7ff fbd1 	bl	8001054 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018bc:	d309      	bcc.n	80018d2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e00d      	b.n	80018ee <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e4      	bne.n	80018ae <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0b0      	sub	sp, #192	; 0xc0
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001914:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001926:	2300      	movs	r3, #0
 8001928:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d103      	bne.n	8001946 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800193e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001942:	663b      	str	r3, [r7, #96]	; 0x60
 8001944:	e001      	b.n	800194a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800194a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001954:	2300      	movs	r3, #0
 8001956:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001964:	2340      	movs	r3, #64	; 0x40
 8001966:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80019cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019d0:	4bab      	ldr	r3, [pc, #684]	; (8001c80 <ETH_MACDMAConfig+0x388>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80019d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80019da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80019dc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80019de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80019e0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80019e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80019e4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80019ea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80019ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80019ee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80019f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80019f2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80019f8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80019fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80019fc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80019fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001a00:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001a04:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001a08:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001a0c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff fb1d 	bl	800106c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a3a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a40:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001a44:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001a4a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001a50:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001a56:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001a5c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001a60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001a68:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a6a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff faf8 	bl	800106c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a84:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a8e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a98:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001aa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aa8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001aac:	4013      	ands	r3, r2
 8001aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ab6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ab8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001abc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ac2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ac8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ace:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ad0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ad4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ad6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ada:	4313      	orrs	r3, r2
 8001adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ae8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff fab9 	bl	800106c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b02:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b04:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001b08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff faa4 	bl	800106c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b2c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b36:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001b3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b40:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001b52:	2304      	movs	r3, #4
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b82:	4413      	add	r3, r2
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001b8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <ETH_MACDMAConfig+0x38c>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b96:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001b98:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b9a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001b9c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001b9e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ba0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ba2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ba4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ba6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ba8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001baa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001bac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001bae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001bb2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001bb6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bca:	4413      	add	r3, r2
 8001bcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bda:	4413      	add	r3, r2
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff fa42 	bl	800106c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bf6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bfc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001c00:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c04:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001c08:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c0c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001c0e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001c12:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c20:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff fa1b 	bl	800106c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c42:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10d      	bne.n	8001c68 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f241 031c 	movw	r3, #4124	; 0x101c
 8001c54:	4413      	add	r3, r2
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6811      	ldr	r1, [r2, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <ETH_MACDMAConfig+0x390>)
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	f241 031c 	movw	r3, #4124	; 0x101c
 8001c64:	440b      	add	r3, r1
 8001c66:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2100      	movs	r1, #0
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f80b 	bl	8001c8c <ETH_MACAddressConfig>
}
 8001c76:	bf00      	nop
 8001c78:	37c0      	adds	r7, #192	; 0xc0
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	ff20810f 	.word	0xff20810f
 8001c84:	f8de3f23 	.word	0xf8de3f23
 8001c88:	00010040 	.word	0x00010040

08001c8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3305      	adds	r3, #5
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	3204      	adds	r2, #4
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <ETH_MACAddressConfig+0x68>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3303      	adds	r3, #3
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	061a      	lsls	r2, r3, #24
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <ETH_MACAddressConfig+0x6c>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	6013      	str	r3, [r2, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40028040 	.word	0x40028040
 8001cf8:	40028044 	.word	0x40028044

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e175      	b.n	8002008 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8164 	bne.w	8002002 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d00b      	beq.n	8001d5a <HAL_GPIO_Init+0x5e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d4e:	2b11      	cmp	r3, #17
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b12      	cmp	r3, #18
 8001d58:	d130      	bne.n	8001dbc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0201 	and.w	r2, r3, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x100>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b12      	cmp	r3, #18
 8001dfa:	d123      	bne.n	8001e44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80be 	beq.w	8002002 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	4b65      	ldr	r3, [pc, #404]	; (800201c <HAL_GPIO_Init+0x320>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a64      	ldr	r2, [pc, #400]	; (800201c <HAL_GPIO_Init+0x320>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b62      	ldr	r3, [pc, #392]	; (800201c <HAL_GPIO_Init+0x320>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e9e:	4a60      	ldr	r2, [pc, #384]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a57      	ldr	r2, [pc, #348]	; (8002024 <HAL_GPIO_Init+0x328>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d037      	beq.n	8001f3a <HAL_GPIO_Init+0x23e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a56      	ldr	r2, [pc, #344]	; (8002028 <HAL_GPIO_Init+0x32c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d031      	beq.n	8001f36 <HAL_GPIO_Init+0x23a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <HAL_GPIO_Init+0x330>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d02b      	beq.n	8001f32 <HAL_GPIO_Init+0x236>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d025      	beq.n	8001f2e <HAL_GPIO_Init+0x232>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a53      	ldr	r2, [pc, #332]	; (8002034 <HAL_GPIO_Init+0x338>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01f      	beq.n	8001f2a <HAL_GPIO_Init+0x22e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_GPIO_Init+0x33c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d019      	beq.n	8001f26 <HAL_GPIO_Init+0x22a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a51      	ldr	r2, [pc, #324]	; (800203c <HAL_GPIO_Init+0x340>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a50      	ldr	r2, [pc, #320]	; (8002040 <HAL_GPIO_Init+0x344>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00d      	beq.n	8001f1e <HAL_GPIO_Init+0x222>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4f      	ldr	r2, [pc, #316]	; (8002044 <HAL_GPIO_Init+0x348>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_GPIO_Init+0x21e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4e      	ldr	r2, [pc, #312]	; (8002048 <HAL_GPIO_Init+0x34c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_GPIO_Init+0x21a>
 8001f12:	2309      	movs	r3, #9
 8001f14:	e012      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f16:	230a      	movs	r3, #10
 8001f18:	e010      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	e00e      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e00c      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f22:	2306      	movs	r3, #6
 8001f24:	e00a      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f26:	2305      	movs	r3, #5
 8001f28:	e008      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e004      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	f002 0203 	and.w	r2, r2, #3
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	4093      	lsls	r3, r2
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f4c:	4934      	ldr	r1, [pc, #208]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <HAL_GPIO_Init+0x350>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f7e:	4a33      	ldr	r2, [pc, #204]	; (800204c <HAL_GPIO_Init+0x350>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f84:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_GPIO_Init+0x350>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa8:	4a28      	ldr	r2, [pc, #160]	; (800204c <HAL_GPIO_Init+0x350>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_GPIO_Init+0x350>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	; (800204c <HAL_GPIO_Init+0x350>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_GPIO_Init+0x350>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ffc:	4a13      	ldr	r2, [pc, #76]	; (800204c <HAL_GPIO_Init+0x350>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3301      	adds	r3, #1
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	2b0f      	cmp	r3, #15
 800200c:	f67f ae86 	bls.w	8001d1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002010:	bf00      	nop
 8002012:	3724      	adds	r7, #36	; 0x24
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40023800 	.word	0x40023800
 8002020:	40013800 	.word	0x40013800
 8002024:	40020000 	.word	0x40020000
 8002028:	40020400 	.word	0x40020400
 800202c:	40020800 	.word	0x40020800
 8002030:	40020c00 	.word	0x40020c00
 8002034:	40021000 	.word	0x40021000
 8002038:	40021400 	.word	0x40021400
 800203c:	40021800 	.word	0x40021800
 8002040:	40021c00 	.word	0x40021c00
 8002044:	40022000 	.word	0x40022000
 8002048:	40022400 	.word	0x40022400
 800204c:	40013c00 	.word	0x40013c00

08002050 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e06f      	b.n	8002142 <HAL_LPTIM_Init+0xf2>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fdde 	bl	8000c38 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d103      	bne.n	800209c <HAL_LPTIM_Init+0x4c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0306 	bic.w	r3, r3, #6
 800209a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80020ae:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d103      	bne.n	80020c0 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 03d8 	bic.w	r3, r3, #216	; 0xd8
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_LPTIM_Init+0xfc>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80020d0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80020d6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80020dc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80020e2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d107      	bne.n	8002102 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80020fa:	4313      	orrs	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d104      	bne.n	8002114 <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <HAL_LPTIM_Init+0xe0>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8002128:	4313      	orrs	r3, r2
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	ff19f1f8 	.word	0xff19f1f8

08002150 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002162:	4b35      	ldr	r3, [pc, #212]	; (8002238 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a34      	ldr	r2, [pc, #208]	; (8002238 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8002168:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800216c:	6013      	str	r3, [r2, #0]
  /* Enable rising edge trigger on the LPTIM Wake-up Timer Exti line */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800216e:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	4a31      	ldr	r2, [pc, #196]	; (8002238 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8002174:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002178:	6093      	str	r3, [r2, #8]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d00c      	beq.n	800219c <HAL_LPTIM_Counter_Start_IT+0x4c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800218a:	d107      	bne.n	800219c <HAL_LPTIM_Counter_Start_IT+0x4c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800219a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2210      	movs	r2, #16
 80021b2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80021bc:	2110      	movs	r1, #16
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f932 	bl	8002428 <LPTIM_WaitForFlag>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d101      	bne.n	80021ce <HAL_LPTIM_Counter_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e02f      	b.n	800222e <HAL_LPTIM_Counter_Start_IT+0xde>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f95a 	bl	8002488 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f919 	bl	800240c <HAL_LPTIM_GetState>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d101      	bne.n	80021e4 <HAL_LPTIM_Counter_Start_IT+0x94>
  {
    return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e024      	b.n	800222e <HAL_LPTIM_Counter_Start_IT+0xde>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0210 	orr.w	r2, r2, #16
 80021f2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0202 	orr.w	r2, r2, #2
 8002202:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0204 	orr.w	r2, r2, #4
 8002222:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40013c00 	.word	0x40013c00

0800223c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10d      	bne.n	800226e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f889 	bl	8002380 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b02      	cmp	r3, #2
 800227a:	d10d      	bne.n	8002298 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d106      	bne.n	8002298 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2202      	movs	r2, #2
 8002290:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f87e 	bl	8002394 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d10d      	bne.n	80022c2 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d106      	bne.n	80022c2 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2204      	movs	r2, #4
 80022ba:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f873 	bl	80023a8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d10d      	bne.n	80022ec <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d106      	bne.n	80022ec <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2208      	movs	r2, #8
 80022e4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f868 	bl	80023bc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d10d      	bne.n	8002316 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b10      	cmp	r3, #16
 8002306:	d106      	bne.n	8002316 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2210      	movs	r2, #16
 800230e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f85d 	bl	80023d0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b20      	cmp	r3, #32
 8002322:	d10d      	bne.n	8002340 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b20      	cmp	r3, #32
 8002330:	d106      	bne.n	8002340 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2220      	movs	r2, #32
 8002338:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f852 	bl	80023e4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d10d      	bne.n	800236a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002358:	2b40      	cmp	r3, #64	; 0x40
 800235a:	d106      	bne.n	800236a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2240      	movs	r2, #64	; 0x40
 8002362:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f847 	bl	80023f8 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  __HAL_LPTIM_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_LPTIM_IRQHandler+0x140>)
 800236c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002370:	615a      	str	r2, [r3, #20]
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800241a:	b2db      	uxtb	r3, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <LPTIM_WaitForFlag+0x58>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <LPTIM_WaitForFlag+0x5c>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	0b9b      	lsrs	r3, r3, #14
 8002442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	3b01      	subs	r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	73fb      	strb	r3, [r7, #15]
    }
  }
  while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	4013      	ands	r3, r2
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d002      	beq.n	8002472 <LPTIM_WaitForFlag+0x4a>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ec      	bne.n	800244c <LPTIM_WaitForFlag+0x24>

  return result;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	20000000 	.word	0x20000000
 8002484:	d1b71759 	.word	0xd1b71759

08002488 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	4b54      	ldr	r3, [pc, #336]	; (80025f0 <LPTIM_Disable+0x168>)
 800249e:	429a      	cmp	r2, r3
 80024a0:	d000      	beq.n	80024a4 <LPTIM_Disable+0x1c>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
      break;
    default:
      break;
 80024a2:	e006      	b.n	80024b2 <LPTIM_Disable+0x2a>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80024a4:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <LPTIM_Disable+0x16c>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80024ae:	61fb      	str	r3, [r7, #28]
      break;
 80024b0:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <LPTIM_Disable+0x168>)
 80024da:	429a      	cmp	r2, r3
 80024dc:	d000      	beq.n	80024e0 <LPTIM_Disable+0x58>
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
      __HAL_RCC_LPTIM1_RELEASE_RESET();
      break;
    default:
      break;
 80024de:	e00c      	b.n	80024fa <LPTIM_Disable+0x72>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80024e0:	4b44      	ldr	r3, [pc, #272]	; (80025f4 <LPTIM_Disable+0x16c>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a43      	ldr	r2, [pc, #268]	; (80025f4 <LPTIM_Disable+0x16c>)
 80024e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ea:	6213      	str	r3, [r2, #32]
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80024ec:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <LPTIM_Disable+0x16c>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <LPTIM_Disable+0x16c>)
 80024f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024f6:	6213      	str	r3, [r2, #32]
      break;
 80024f8:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <LPTIM_Disable+0x7e>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d05d      	beq.n	80025c2 <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <LPTIM_Disable+0x168>)
 800250e:	429a      	cmp	r2, r3
 8002510:	d000      	beq.n	8002514 <LPTIM_Disable+0x8c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8002512:	e008      	b.n	8002526 <LPTIM_Disable+0x9e>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8002514:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <LPTIM_Disable+0x16c>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	4a36      	ldr	r2, [pc, #216]	; (80025f4 <LPTIM_Disable+0x16c>)
 800251c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        break;
 8002524:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01a      	beq.n	8002562 <LPTIM_Disable+0xda>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8002544:	2108      	movs	r1, #8
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ff6e 	bl	8002428 <LPTIM_WaitForFlag>
 800254c:	4603      	mov	r3, r0
 800254e:	2b03      	cmp	r3, #3
 8002550:	d103      	bne.n	800255a <LPTIM_Disable+0xd2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2203      	movs	r2, #3
 8002556:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2208      	movs	r2, #8
 8002560:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01a      	beq.n	800259e <LPTIM_Disable+0x116>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002580:	2110      	movs	r1, #16
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff50 	bl	8002428 <LPTIM_WaitForFlag>
 8002588:	4603      	mov	r3, r0
 800258a:	2b03      	cmp	r3, #3
 800258c:	d103      	bne.n	8002596 <LPTIM_Disable+0x10e>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2210      	movs	r2, #16
 800259c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <LPTIM_Disable+0x168>)
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d000      	beq.n	80025ac <LPTIM_Disable+0x124>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
        break;
      default:
        break;
 80025aa:	e00b      	b.n	80025c4 <LPTIM_Disable+0x13c>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <LPTIM_Disable+0x16c>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025b6:	490f      	ldr	r1, [pc, #60]	; (80025f4 <LPTIM_Disable+0x16c>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
        break;
 80025c0:	e000      	b.n	80025c4 <LPTIM_Disable+0x13c>
    }
  }
 80025c2:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80025e4:	b662      	cpsie	i

  __enable_irq();
}
 80025e6:	bf00      	nop
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40002400 	.word	0x40002400
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40007000 	.word	0x40007000

08002618 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002646:	f7fe fd05 	bl	8001054 <HAL_GetTick>
 800264a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800264c:	e009      	b.n	8002662 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800264e:	f7fe fd01 	bl	8001054 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800265c:	d901      	bls.n	8002662 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e022      	b.n	80026a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266e:	d1ee      	bne.n	800264e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800267c:	f7fe fcea 	bl	8001054 <HAL_GetTick>
 8002680:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002682:	e009      	b.n	8002698 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002684:	f7fe fce6 	bl	8001054 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002692:	d901      	bls.n	8002698 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e007      	b.n	80026a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026a4:	d1ee      	bne.n	8002684 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40007000 	.word	0x40007000

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e29b      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8087 	beq.w	80027ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026dc:	4b96      	ldr	r3, [pc, #600]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d00c      	beq.n	8002702 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e8:	4b93      	ldr	r3, [pc, #588]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d112      	bne.n	800271a <HAL_RCC_OscConfig+0x62>
 80026f4:	4b90      	ldr	r3, [pc, #576]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002700:	d10b      	bne.n	800271a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002702:	4b8d      	ldr	r3, [pc, #564]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d06c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x130>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d168      	bne.n	80027e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e275      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x7a>
 8002724:	4b84      	ldr	r3, [pc, #528]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a83      	ldr	r2, [pc, #524]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e02e      	b.n	8002790 <HAL_RCC_OscConfig+0xd8>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x9c>
 800273a:	4b7f      	ldr	r3, [pc, #508]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7e      	ldr	r2, [pc, #504]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b7c      	ldr	r3, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7b      	ldr	r2, [pc, #492]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800274c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e01d      	b.n	8002790 <HAL_RCC_OscConfig+0xd8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0xc0>
 800275e:	4b76      	ldr	r3, [pc, #472]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a75      	ldr	r2, [pc, #468]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b73      	ldr	r3, [pc, #460]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a72      	ldr	r2, [pc, #456]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0xd8>
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a6e      	ldr	r2, [pc, #440]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800277e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b6c      	ldr	r3, [pc, #432]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6b      	ldr	r2, [pc, #428]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800278a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d013      	beq.n	80027c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fc5c 	bl	8001054 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe fc58 	bl	8001054 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e229      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b61      	ldr	r3, [pc, #388]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0xe8>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fc48 	bl	8001054 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fe fc44 	bl	8001054 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e215      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	4b57      	ldr	r3, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x110>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d069      	beq.n	80028ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f6:	4b50      	ldr	r3, [pc, #320]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b08      	cmp	r3, #8
 800280c:	d11c      	bne.n	8002848 <HAL_RCC_OscConfig+0x190>
 800280e:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d116      	bne.n	8002848 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_RCC_OscConfig+0x17a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e1e9      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	493d      	ldr	r1, [pc, #244]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	e040      	b.n	80028ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fbfa 	bl	8001054 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002864:	f7fe fbf6 	bl	8001054 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e1c7      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002876:	4b30      	ldr	r3, [pc, #192]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4929      	ldr	r1, [pc, #164]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
 8002896:	e018      	b.n	80028ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a26      	ldr	r2, [pc, #152]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fbd6 	bl	8001054 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ac:	f7fe fbd2 	bl	8001054 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1a3      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d038      	beq.n	8002948 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d019      	beq.n	8002912 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 80028e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e2:	4a15      	ldr	r2, [pc, #84]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7fe fbb3 	bl	8001054 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f2:	f7fe fbaf 	bl	8001054 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e180      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x23a>
 8002910:	e01a      	b.n	8002948 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002916:	4a08      	ldr	r2, [pc, #32]	; (8002938 <HAL_RCC_OscConfig+0x280>)
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fb99 	bl	8001054 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002926:	f7fe fb95 	bl	8001054 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d903      	bls.n	800293c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e166      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
 8002938:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293c:	4b92      	ldr	r3, [pc, #584]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 800293e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ee      	bne.n	8002926 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80a4 	beq.w	8002a9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002956:	4b8c      	ldr	r3, [pc, #560]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10d      	bne.n	800297e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b89      	ldr	r3, [pc, #548]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a88      	ldr	r2, [pc, #544]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b86      	ldr	r3, [pc, #536]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297e:	4b83      	ldr	r3, [pc, #524]	; (8002b8c <HAL_RCC_OscConfig+0x4d4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d118      	bne.n	80029bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800298a:	4b80      	ldr	r3, [pc, #512]	; (8002b8c <HAL_RCC_OscConfig+0x4d4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a7f      	ldr	r2, [pc, #508]	; (8002b8c <HAL_RCC_OscConfig+0x4d4>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002996:	f7fe fb5d 	bl	8001054 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7fe fb59 	bl	8001054 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b64      	cmp	r3, #100	; 0x64
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e12a      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b0:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCC_OscConfig+0x4d4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x31a>
 80029c4:	4b70      	ldr	r3, [pc, #448]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a6f      	ldr	r2, [pc, #444]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
 80029d0:	e02d      	b.n	8002a2e <HAL_RCC_OscConfig+0x376>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x33c>
 80029da:	4b6b      	ldr	r3, [pc, #428]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a6a      	ldr	r2, [pc, #424]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	4a67      	ldr	r2, [pc, #412]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70
 80029f2:	e01c      	b.n	8002a2e <HAL_RCC_OscConfig+0x376>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x35e>
 80029fc:	4b62      	ldr	r3, [pc, #392]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a61      	ldr	r2, [pc, #388]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
 8002a08:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a5e      	ldr	r2, [pc, #376]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	e00b      	b.n	8002a2e <HAL_RCC_OscConfig+0x376>
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
 8002a22:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d015      	beq.n	8002a62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe fb0d 	bl	8001054 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fb09 	bl	8001054 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0d8      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	4b4c      	ldr	r3, [pc, #304]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ee      	beq.n	8002a3e <HAL_RCC_OscConfig+0x386>
 8002a60:	e014      	b.n	8002a8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe faf7 	bl	8001054 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe faf3 	bl	8001054 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0c2      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d105      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a3c      	ldr	r2, [pc, #240]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80ae 	beq.w	8002c04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa8:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d06d      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d14b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a31      	ldr	r2, [pc, #196]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fac4 	bl	8001054 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fac0 	bl	8001054 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e091      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	019b      	lsls	r3, r3, #6
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	3b01      	subs	r3, #1
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	071b      	lsls	r3, r3, #28
 8002b1a:	491b      	ldr	r1, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fa92 	bl	8001054 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fa8e 	bl	8001054 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e05f      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x47c>
 8002b52:	e057      	b.n	8002c04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fa78 	bl	8001054 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fa74 	bl	8001054 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e045      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4b0>
 8002b86:	e03d      	b.n	8002c04 <HAL_RCC_OscConfig+0x54c>
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <HAL_RCC_OscConfig+0x558>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d030      	beq.n	8002c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d129      	bne.n	8002c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d122      	bne.n	8002c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d119      	bne.n	8002c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d10f      	bne.n	8002c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800

08002c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0d0      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d910      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 020f 	bic.w	r2, r3, #15
 8002c42:	4965      	ldr	r1, [pc, #404]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d040      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d115      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e073      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06b      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4936      	ldr	r1, [pc, #216]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe f9a4 	bl	8001054 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe f9a0 	bl	8001054 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e053      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d210      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 020f 	bic.w	r2, r3, #15
 8002d4e:	4922      	ldr	r1, [pc, #136]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f821 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002daa:	4601      	mov	r1, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_RCC_ClockConfig+0x1cc>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	fa21 f303 	lsr.w	r3, r1, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1d0>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1d4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe f900 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08007754 	.word	0x08007754
 8002de4:	20000000 	.word	0x20000000
 8002de8:	20000004 	.word	0x20000004

08002dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e02:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d007      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x32>
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d008      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x38>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 808d 	bne.w	8002f32 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e1a:	60bb      	str	r3, [r7, #8]
      break;
 8002e1c:	e08c      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1e:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e20:	60bb      	str	r3, [r7, #8]
      break;
 8002e22:	e089      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e24:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e2e:	4b45      	ldr	r3, [pc, #276]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d023      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	ea03 0501 	and.w	r5, r3, r1
 8002e50:	ea04 0602 	and.w	r6, r4, r2
 8002e54:	4a3d      	ldr	r2, [pc, #244]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e56:	fb02 f106 	mul.w	r1, r2, r6
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	fb02 f205 	mul.w	r2, r2, r5
 8002e60:	440a      	add	r2, r1
 8002e62:	493a      	ldr	r1, [pc, #232]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e64:	fba5 0101 	umull	r0, r1, r5, r1
 8002e68:	1853      	adds	r3, r2, r1
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f04f 0400 	mov.w	r4, #0
 8002e72:	461a      	mov	r2, r3
 8002e74:	4623      	mov	r3, r4
 8002e76:	f7fd f9e3 	bl	8000240 <__aeabi_uldivmod>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e049      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	f04f 0400 	mov.w	r4, #0
 8002e8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	ea03 0501 	and.w	r5, r3, r1
 8002e98:	ea04 0602 	and.w	r6, r4, r2
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	4632      	mov	r2, r6
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	f04f 0400 	mov.w	r4, #0
 8002ea8:	0154      	lsls	r4, r2, #5
 8002eaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002eae:	014b      	lsls	r3, r1, #5
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	1b49      	subs	r1, r1, r5
 8002eb6:	eb62 0206 	sbc.w	r2, r2, r6
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	f04f 0400 	mov.w	r4, #0
 8002ec2:	0194      	lsls	r4, r2, #6
 8002ec4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ec8:	018b      	lsls	r3, r1, #6
 8002eca:	1a5b      	subs	r3, r3, r1
 8002ecc:	eb64 0402 	sbc.w	r4, r4, r2
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	00e2      	lsls	r2, r4, #3
 8002eda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ede:	00d9      	lsls	r1, r3, #3
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4614      	mov	r4, r2
 8002ee4:	195b      	adds	r3, r3, r5
 8002ee6:	eb44 0406 	adc.w	r4, r4, r6
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	02a2      	lsls	r2, r4, #10
 8002ef4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ef8:	0299      	lsls	r1, r3, #10
 8002efa:	460b      	mov	r3, r1
 8002efc:	4614      	mov	r4, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	4621      	mov	r1, r4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f04f 0400 	mov.w	r4, #0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	f7fd f998 	bl	8000240 <__aeabi_uldivmod>
 8002f10:	4603      	mov	r3, r0
 8002f12:	460c      	mov	r4, r1
 8002f14:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0c1b      	lsrs	r3, r3, #16
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	3301      	adds	r3, #1
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	60bb      	str	r3, [r7, #8]
      break;
 8002f30:	e002      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f34:	60bb      	str	r3, [r7, #8]
      break;
 8002f36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f38:	68bb      	ldr	r3, [r7, #8]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	017d7840 	.word	0x017d7840

08002f50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f6c:	f7ff fff0 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f70:	4601      	mov	r1, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0a9b      	lsrs	r3, r3, #10
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4a03      	ldr	r2, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7e:	5cd3      	ldrb	r3, [r2, r3]
 8002f80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08007764 	.word	0x08007764

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f94:	f7ff ffdc 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f98:	4601      	mov	r1, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	0b5b      	lsrs	r3, r3, #13
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4a03      	ldr	r2, [pc, #12]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	08007764 	.word	0x08007764

08002fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d012      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fe0:	4b69      	ldr	r3, [pc, #420]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a68      	ldr	r2, [pc, #416]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fea:	6093      	str	r3, [r2, #8]
 8002fec:	4b66      	ldr	r3, [pc, #408]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	4964      	ldr	r1, [pc, #400]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003002:	2301      	movs	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d017      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003012:	4b5d      	ldr	r3, [pc, #372]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	4959      	ldr	r1, [pc, #356]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003030:	d101      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003032:	2301      	movs	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800303e:	2301      	movs	r3, #1
 8003040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d017      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800304e:	4b4e      	ldr	r3, [pc, #312]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003054:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	494a      	ldr	r1, [pc, #296]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306c:	d101      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 808b 	beq.w	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	4b3a      	ldr	r3, [pc, #232]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4a39      	ldr	r2, [pc, #228]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a6:	6413      	str	r3, [r2, #64]	; 0x40
 80030a8:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a34      	ldr	r2, [pc, #208]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fd ffc8 	bl	8001054 <HAL_GetTick>
 80030c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7fd ffc4 	bl	8001054 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e38d      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030e6:	4b28      	ldr	r3, [pc, #160]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d035      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d02e      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003104:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800310e:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003126:	4a18      	ldr	r2, [pc, #96]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d114      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd ff8c 	bl	8001054 <HAL_GetTick>
 800313c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fd ff88 	bl	8001054 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e34f      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ee      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800316e:	d111      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800317e:	400b      	ands	r3, r1
 8003180:	4901      	ldr	r1, [pc, #4]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
 8003186:	e00b      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003188:	40023800 	.word	0x40023800
 800318c:	40007000 	.word	0x40007000
 8003190:	0ffffcff 	.word	0x0ffffcff
 8003194:	4bb3      	ldr	r3, [pc, #716]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4ab2      	ldr	r2, [pc, #712]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800319a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800319e:	6093      	str	r3, [r2, #8]
 80031a0:	4bb0      	ldr	r3, [pc, #704]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	49ad      	ldr	r1, [pc, #692]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d010      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031be:	4ba9      	ldr	r3, [pc, #676]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c4:	4aa7      	ldr	r2, [pc, #668]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031ce:	4ba5      	ldr	r3, [pc, #660]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	49a2      	ldr	r1, [pc, #648]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ec:	4b9d      	ldr	r3, [pc, #628]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fa:	499a      	ldr	r1, [pc, #616]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800320e:	4b95      	ldr	r3, [pc, #596]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800321c:	4991      	ldr	r1, [pc, #580]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003230:	4b8c      	ldr	r3, [pc, #560]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323e:	4989      	ldr	r1, [pc, #548]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003252:	4b84      	ldr	r3, [pc, #528]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4980      	ldr	r1, [pc, #512]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003274:	4b7b      	ldr	r3, [pc, #492]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4978      	ldr	r1, [pc, #480]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003296:	4b73      	ldr	r3, [pc, #460]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	f023 020c 	bic.w	r2, r3, #12
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	496f      	ldr	r1, [pc, #444]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032b8:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	4967      	ldr	r1, [pc, #412]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032da:	4b62      	ldr	r3, [pc, #392]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e8:	495e      	ldr	r1, [pc, #376]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	4956      	ldr	r1, [pc, #344]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800331e:	4b51      	ldr	r3, [pc, #324]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	494d      	ldr	r1, [pc, #308]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003340:	4b48      	ldr	r3, [pc, #288]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	4945      	ldr	r1, [pc, #276]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003362:	4b40      	ldr	r3, [pc, #256]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003370:	493c      	ldr	r1, [pc, #240]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003392:	4934      	ldr	r1, [pc, #208]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d011      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033a6:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b4:	492b      	ldr	r1, [pc, #172]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c4:	d101      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033e6:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f4:	491b      	ldr	r1, [pc, #108]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00b      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003418:	4912      	ldr	r1, [pc, #72]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800342c:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343c:	4909      	ldr	r1, [pc, #36]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00f      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003456:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	e002      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	4985      	ldr	r1, [pc, #532]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800347c:	4b80      	ldr	r3, [pc, #512]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800347e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003482:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800348c:	497c      	ldr	r1, [pc, #496]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d005      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034a2:	f040 80d6 	bne.w	8003652 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034a6:	4b76      	ldr	r3, [pc, #472]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a75      	ldr	r2, [pc, #468]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b2:	f7fd fdcf 	bl	8001054 <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034ba:	f7fd fdcb 	bl	8001054 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b64      	cmp	r3, #100	; 0x64
 80034c6:	d901      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e194      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034cc:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f0      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d021      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11d      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034ec:	4b64      	ldr	r3, [pc, #400]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034fa:	4b61      	ldr	r3, [pc, #388]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003500:	0e1b      	lsrs	r3, r3, #24
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	019a      	lsls	r2, r3, #6
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	041b      	lsls	r3, r3, #16
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	061b      	lsls	r3, r3, #24
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	071b      	lsls	r3, r3, #28
 8003520:	4957      	ldr	r1, [pc, #348]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02e      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d129      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003554:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355a:	0c1b      	lsrs	r3, r3, #16
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003568:	0f1b      	lsrs	r3, r3, #28
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	019a      	lsls	r2, r3, #6
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	431a      	orrs	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	071b      	lsls	r3, r3, #28
 8003588:	493d      	ldr	r1, [pc, #244]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003590:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003596:	f023 021f 	bic.w	r2, r3, #31
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	3b01      	subs	r3, #1
 80035a0:	4937      	ldr	r1, [pc, #220]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01d      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035b4:	4b32      	ldr	r3, [pc, #200]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ba:	0e1b      	lsrs	r3, r3, #24
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035c2:	4b2f      	ldr	r3, [pc, #188]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c8:	0f1b      	lsrs	r3, r3, #28
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	019a      	lsls	r2, r3, #6
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	041b      	lsls	r3, r3, #16
 80035dc:	431a      	orrs	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	071b      	lsls	r3, r3, #28
 80035e8:	4925      	ldr	r1, [pc, #148]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d011      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	019a      	lsls	r2, r3, #6
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	061b      	lsls	r3, r3, #24
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	071b      	lsls	r3, r3, #28
 8003618:	4919      	ldr	r1, [pc, #100]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a16      	ldr	r2, [pc, #88]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800362a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362c:	f7fd fd12 	bl	8001054 <HAL_GetTick>
 8003630:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003634:	f7fd fd0e 	bl	8001054 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0d7      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b01      	cmp	r3, #1
 8003656:	f040 80cd 	bne.w	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a08      	ldr	r2, [pc, #32]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003666:	f7fd fcf5 	bl	8001054 <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800366e:	f7fd fcf1 	bl	8001054 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b64      	cmp	r3, #100	; 0x64
 800367a:	d903      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0ba      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003680:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003684:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003690:	d0ed      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d02e      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d12a      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036ba:	4b51      	ldr	r3, [pc, #324]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036c8:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	0f1b      	lsrs	r3, r3, #28
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	019a      	lsls	r2, r3, #6
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	061b      	lsls	r3, r3, #24
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	071b      	lsls	r3, r3, #28
 80036ee:	4944      	ldr	r1, [pc, #272]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036f6:	4b42      	ldr	r3, [pc, #264]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	3b01      	subs	r3, #1
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	493d      	ldr	r1, [pc, #244]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d022      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003724:	d11d      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003726:	4b36      	ldr	r3, [pc, #216]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	0e1b      	lsrs	r3, r3, #24
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003734:	4b32      	ldr	r3, [pc, #200]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	0f1b      	lsrs	r3, r3, #28
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	019a      	lsls	r2, r3, #6
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	071b      	lsls	r3, r3, #28
 800375a:	4929      	ldr	r1, [pc, #164]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d028      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	0e1b      	lsrs	r3, r3, #24
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	0c1b      	lsrs	r3, r3, #16
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	019a      	lsls	r2, r3, #6
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	431a      	orrs	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	071b      	lsls	r3, r3, #28
 80037a2:	4917      	ldr	r1, [pc, #92]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4911      	ldr	r1, [pc, #68]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037cc:	f7fd fc42 	bl	8001054 <HAL_GetTick>
 80037d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037d4:	f7fd fc3e 	bl	8001054 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e007      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f2:	d1ef      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800

08003804 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e01c      	b.n	8003850 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	795b      	ldrb	r3, [r3, #5]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fa2c 	bl	8000c84 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0204 	orr.w	r2, r2, #4
 8003840:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06b      	b.n	8003942 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7f5b      	ldrb	r3, [r3, #29]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fa22 	bl	8000cc4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	22ca      	movs	r2, #202	; 0xca
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2253      	movs	r2, #83	; 0x53
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f85a 	bl	8003950 <RTC_EnterInitMode>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	22ff      	movs	r2, #255	; 0xff
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e046      	b.n	8003942 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6899      	ldr	r1, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <HAL_RTC_Init+0xf4>)
 80038c0:	400b      	ands	r3, r1
 80038c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6899      	ldr	r1, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6919      	ldr	r1, [r3, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	041a      	lsls	r2, r3, #16
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800390e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0208 	bic.w	r2, r2, #8
 800391e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	22ff      	movs	r2, #255	; 0xff
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	ff8fffbf 	.word	0xff8fffbf

08003950 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d119      	bne.n	800399e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f04f 32ff 	mov.w	r2, #4294967295
 8003972:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003974:	f7fd fb6e 	bl	8001054 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800397a:	e009      	b.n	8003990 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800397c:	f7fd fb6a 	bl	8001054 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398a:	d901      	bls.n	8003990 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e007      	b.n	80039a0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ee      	beq.n	800397c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e040      	b.n	8003a3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd f994 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2224      	movs	r2, #36	; 0x24
 80039d4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fa22 	bl	8003e30 <UART_SetConfig>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e022      	b.n	8003a3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fcc0 	bl	8004384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fd47 	bl	80044c8 <UART_CheckIdleState>
 8003a3a:	4603      	mov	r3, r0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d17f      	bne.n	8003b5c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_UART_Transmit+0x24>
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e078      	b.n	8003b5e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Transmit+0x36>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e071      	b.n	8003b5e <HAL_UART_Transmit+0x11a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2221      	movs	r2, #33	; 0x21
 8003a8c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003a8e:	f7fd fae1 	bl	8001054 <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d108      	bne.n	8003ac0 <HAL_UART_Transmit+0x7c>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e003      	b.n	8003ac8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003ad0:	e02c      	b.n	8003b2c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fd38 	bl	8004552 <UART_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e038      	b.n	8003b5e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	3302      	adds	r3, #2
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	e007      	b.n	8003b1a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	3301      	adds	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1cc      	bne.n	8003ad2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2140      	movs	r1, #64	; 0x40
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fd05 	bl	8004552 <UART_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e005      	b.n	8003b5e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d113      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8114 	beq.w	8003dde <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
      }
      return;
 8003bbe:	e10e      	b.n	8003dde <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80d6 	beq.w	8003d74 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d105      	bne.n	8003bde <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80cb 	beq.w	8003d74 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <HAL_UART_IRQHandler+0x9e>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <HAL_UART_IRQHandler+0xc6>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c26:	f043 0204 	orr.w	r2, r3, #4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00e      	beq.n	8003c56 <HAL_UART_IRQHandler+0xee>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2204      	movs	r2, #4
 8003c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c4e:	f043 0202 	orr.w	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d013      	beq.n	8003c88 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c80:	f043 0208 	orr.w	r2, r3, #8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00f      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x14a>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8093 	beq.w	8003de2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d004      	beq.n	8003cfe <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d031      	beq.n	8003d62 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fca2 	bl	8004648 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d123      	bne.n	8003d5a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d013      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2e:	4a30      	ldr	r2, [pc, #192]	; (8003df0 <HAL_UART_IRQHandler+0x288>)
 8003d30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd facb 	bl	80012d2 <HAL_DMA_Abort_IT>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	e00e      	b.n	8003d70 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f858 	bl	8003e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	e00a      	b.n	8003d70 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f854 	bl	8003e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	e006      	b.n	8003d70 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f850 	bl	8003e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003d6e:	e038      	b.n	8003de2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	bf00      	nop
    return;
 8003d72:	e036      	b.n	8003de2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <HAL_UART_IRQHandler+0x232>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f842 	bl	8003e1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d98:	e026      	b.n	8003de8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d017      	beq.n	8003de6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
    }
    return;
 8003dbe:	e012      	b.n	8003de6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00e      	beq.n	8003de8 <HAL_UART_IRQHandler+0x280>
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fc6d 	bl	80046b4 <UART_EndTransmit_IT>
    return;
 8003dda:	bf00      	nop
 8003ddc:	e004      	b.n	8003de8 <HAL_UART_IRQHandler+0x280>
      return;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <HAL_UART_IRQHandler+0x280>
    return;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_UART_IRQHandler+0x280>
    return;
 8003de6:	bf00      	nop
  }

}
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	08004689 	.word	0x08004689

08003df4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4bb1      	ldr	r3, [pc, #708]	; (8004124 <UART_SetConfig+0x2f4>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	6939      	ldr	r1, [r7, #16]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a9f      	ldr	r2, [pc, #636]	; (8004128 <UART_SetConfig+0x2f8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d121      	bne.n	8003ef4 <UART_SetConfig+0xc4>
 8003eb0:	4b9e      	ldr	r3, [pc, #632]	; (800412c <UART_SetConfig+0x2fc>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d816      	bhi.n	8003eec <UART_SetConfig+0xbc>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0x94>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003ee1 	.word	0x08003ee1
 8003ecc:	08003edb 	.word	0x08003edb
 8003ed0:	08003ee7 	.word	0x08003ee7
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e151      	b.n	800417e <UART_SetConfig+0x34e>
 8003eda:	2302      	movs	r3, #2
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e14e      	b.n	800417e <UART_SetConfig+0x34e>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e14b      	b.n	800417e <UART_SetConfig+0x34e>
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e148      	b.n	800417e <UART_SetConfig+0x34e>
 8003eec:	2310      	movs	r3, #16
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	bf00      	nop
 8003ef2:	e144      	b.n	800417e <UART_SetConfig+0x34e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a8d      	ldr	r2, [pc, #564]	; (8004130 <UART_SetConfig+0x300>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d134      	bne.n	8003f68 <UART_SetConfig+0x138>
 8003efe:	4b8b      	ldr	r3, [pc, #556]	; (800412c <UART_SetConfig+0x2fc>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b0c      	cmp	r3, #12
 8003f0a:	d829      	bhi.n	8003f60 <UART_SetConfig+0x130>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <UART_SetConfig+0xe4>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f49 	.word	0x08003f49
 8003f18:	08003f61 	.word	0x08003f61
 8003f1c:	08003f61 	.word	0x08003f61
 8003f20:	08003f61 	.word	0x08003f61
 8003f24:	08003f55 	.word	0x08003f55
 8003f28:	08003f61 	.word	0x08003f61
 8003f2c:	08003f61 	.word	0x08003f61
 8003f30:	08003f61 	.word	0x08003f61
 8003f34:	08003f4f 	.word	0x08003f4f
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f61 	.word	0x08003f61
 8003f44:	08003f5b 	.word	0x08003f5b
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e117      	b.n	800417e <UART_SetConfig+0x34e>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e114      	b.n	800417e <UART_SetConfig+0x34e>
 8003f54:	2304      	movs	r3, #4
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e111      	b.n	800417e <UART_SetConfig+0x34e>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e10e      	b.n	800417e <UART_SetConfig+0x34e>
 8003f60:	2310      	movs	r3, #16
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	bf00      	nop
 8003f66:	e10a      	b.n	800417e <UART_SetConfig+0x34e>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a71      	ldr	r2, [pc, #452]	; (8004134 <UART_SetConfig+0x304>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d120      	bne.n	8003fb4 <UART_SetConfig+0x184>
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <UART_SetConfig+0x2fc>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d00f      	beq.n	8003fa0 <UART_SetConfig+0x170>
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d802      	bhi.n	8003f8a <UART_SetConfig+0x15a>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <UART_SetConfig+0x164>
 8003f88:	e010      	b.n	8003fac <UART_SetConfig+0x17c>
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d005      	beq.n	8003f9a <UART_SetConfig+0x16a>
 8003f8e:	2b30      	cmp	r3, #48	; 0x30
 8003f90:	d009      	beq.n	8003fa6 <UART_SetConfig+0x176>
 8003f92:	e00b      	b.n	8003fac <UART_SetConfig+0x17c>
 8003f94:	2300      	movs	r3, #0
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e0f1      	b.n	800417e <UART_SetConfig+0x34e>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	77fb      	strb	r3, [r7, #31]
 8003f9e:	e0ee      	b.n	800417e <UART_SetConfig+0x34e>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e0eb      	b.n	800417e <UART_SetConfig+0x34e>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e0e8      	b.n	800417e <UART_SetConfig+0x34e>
 8003fac:	2310      	movs	r3, #16
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	bf00      	nop
 8003fb2:	e0e4      	b.n	800417e <UART_SetConfig+0x34e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a5f      	ldr	r2, [pc, #380]	; (8004138 <UART_SetConfig+0x308>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d120      	bne.n	8004000 <UART_SetConfig+0x1d0>
 8003fbe:	4b5b      	ldr	r3, [pc, #364]	; (800412c <UART_SetConfig+0x2fc>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fc8:	2b40      	cmp	r3, #64	; 0x40
 8003fca:	d00f      	beq.n	8003fec <UART_SetConfig+0x1bc>
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d802      	bhi.n	8003fd6 <UART_SetConfig+0x1a6>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <UART_SetConfig+0x1b0>
 8003fd4:	e010      	b.n	8003ff8 <UART_SetConfig+0x1c8>
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d005      	beq.n	8003fe6 <UART_SetConfig+0x1b6>
 8003fda:	2bc0      	cmp	r3, #192	; 0xc0
 8003fdc:	d009      	beq.n	8003ff2 <UART_SetConfig+0x1c2>
 8003fde:	e00b      	b.n	8003ff8 <UART_SetConfig+0x1c8>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e0cb      	b.n	800417e <UART_SetConfig+0x34e>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e0c8      	b.n	800417e <UART_SetConfig+0x34e>
 8003fec:	2304      	movs	r3, #4
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e0c5      	b.n	800417e <UART_SetConfig+0x34e>
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	e0c2      	b.n	800417e <UART_SetConfig+0x34e>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	bf00      	nop
 8003ffe:	e0be      	b.n	800417e <UART_SetConfig+0x34e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a4d      	ldr	r2, [pc, #308]	; (800413c <UART_SetConfig+0x30c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d124      	bne.n	8004054 <UART_SetConfig+0x224>
 800400a:	4b48      	ldr	r3, [pc, #288]	; (800412c <UART_SetConfig+0x2fc>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004018:	d012      	beq.n	8004040 <UART_SetConfig+0x210>
 800401a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401e:	d802      	bhi.n	8004026 <UART_SetConfig+0x1f6>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <UART_SetConfig+0x204>
 8004024:	e012      	b.n	800404c <UART_SetConfig+0x21c>
 8004026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402a:	d006      	beq.n	800403a <UART_SetConfig+0x20a>
 800402c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004030:	d009      	beq.n	8004046 <UART_SetConfig+0x216>
 8004032:	e00b      	b.n	800404c <UART_SetConfig+0x21c>
 8004034:	2300      	movs	r3, #0
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e0a1      	b.n	800417e <UART_SetConfig+0x34e>
 800403a:	2302      	movs	r3, #2
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e09e      	b.n	800417e <UART_SetConfig+0x34e>
 8004040:	2304      	movs	r3, #4
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e09b      	b.n	800417e <UART_SetConfig+0x34e>
 8004046:	2308      	movs	r3, #8
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	e098      	b.n	800417e <UART_SetConfig+0x34e>
 800404c:	2310      	movs	r3, #16
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	bf00      	nop
 8004052:	e094      	b.n	800417e <UART_SetConfig+0x34e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a39      	ldr	r2, [pc, #228]	; (8004140 <UART_SetConfig+0x310>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d124      	bne.n	80040a8 <UART_SetConfig+0x278>
 800405e:	4b33      	ldr	r3, [pc, #204]	; (800412c <UART_SetConfig+0x2fc>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406c:	d012      	beq.n	8004094 <UART_SetConfig+0x264>
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004072:	d802      	bhi.n	800407a <UART_SetConfig+0x24a>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <UART_SetConfig+0x258>
 8004078:	e012      	b.n	80040a0 <UART_SetConfig+0x270>
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407e:	d006      	beq.n	800408e <UART_SetConfig+0x25e>
 8004080:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004084:	d009      	beq.n	800409a <UART_SetConfig+0x26a>
 8004086:	e00b      	b.n	80040a0 <UART_SetConfig+0x270>
 8004088:	2301      	movs	r3, #1
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e077      	b.n	800417e <UART_SetConfig+0x34e>
 800408e:	2302      	movs	r3, #2
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e074      	b.n	800417e <UART_SetConfig+0x34e>
 8004094:	2304      	movs	r3, #4
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e071      	b.n	800417e <UART_SetConfig+0x34e>
 800409a:	2308      	movs	r3, #8
 800409c:	77fb      	strb	r3, [r7, #31]
 800409e:	e06e      	b.n	800417e <UART_SetConfig+0x34e>
 80040a0:	2310      	movs	r3, #16
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	bf00      	nop
 80040a6:	e06a      	b.n	800417e <UART_SetConfig+0x34e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a25      	ldr	r2, [pc, #148]	; (8004144 <UART_SetConfig+0x314>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d124      	bne.n	80040fc <UART_SetConfig+0x2cc>
 80040b2:	4b1e      	ldr	r3, [pc, #120]	; (800412c <UART_SetConfig+0x2fc>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d012      	beq.n	80040e8 <UART_SetConfig+0x2b8>
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	d802      	bhi.n	80040ce <UART_SetConfig+0x29e>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <UART_SetConfig+0x2ac>
 80040cc:	e012      	b.n	80040f4 <UART_SetConfig+0x2c4>
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d2:	d006      	beq.n	80040e2 <UART_SetConfig+0x2b2>
 80040d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040d8:	d009      	beq.n	80040ee <UART_SetConfig+0x2be>
 80040da:	e00b      	b.n	80040f4 <UART_SetConfig+0x2c4>
 80040dc:	2300      	movs	r3, #0
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e04d      	b.n	800417e <UART_SetConfig+0x34e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e04a      	b.n	800417e <UART_SetConfig+0x34e>
 80040e8:	2304      	movs	r3, #4
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e047      	b.n	800417e <UART_SetConfig+0x34e>
 80040ee:	2308      	movs	r3, #8
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e044      	b.n	800417e <UART_SetConfig+0x34e>
 80040f4:	2310      	movs	r3, #16
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	bf00      	nop
 80040fa:	e040      	b.n	800417e <UART_SetConfig+0x34e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a11      	ldr	r2, [pc, #68]	; (8004148 <UART_SetConfig+0x318>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d139      	bne.n	800417a <UART_SetConfig+0x34a>
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <UART_SetConfig+0x2fc>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004114:	d027      	beq.n	8004166 <UART_SetConfig+0x336>
 8004116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800411a:	d817      	bhi.n	800414c <UART_SetConfig+0x31c>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01c      	beq.n	800415a <UART_SetConfig+0x32a>
 8004120:	e027      	b.n	8004172 <UART_SetConfig+0x342>
 8004122:	bf00      	nop
 8004124:	efff69f3 	.word	0xefff69f3
 8004128:	40011000 	.word	0x40011000
 800412c:	40023800 	.word	0x40023800
 8004130:	40004400 	.word	0x40004400
 8004134:	40004800 	.word	0x40004800
 8004138:	40004c00 	.word	0x40004c00
 800413c:	40005000 	.word	0x40005000
 8004140:	40011400 	.word	0x40011400
 8004144:	40007800 	.word	0x40007800
 8004148:	40007c00 	.word	0x40007c00
 800414c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004150:	d006      	beq.n	8004160 <UART_SetConfig+0x330>
 8004152:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004156:	d009      	beq.n	800416c <UART_SetConfig+0x33c>
 8004158:	e00b      	b.n	8004172 <UART_SetConfig+0x342>
 800415a:	2300      	movs	r3, #0
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e00e      	b.n	800417e <UART_SetConfig+0x34e>
 8004160:	2302      	movs	r3, #2
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e00b      	b.n	800417e <UART_SetConfig+0x34e>
 8004166:	2304      	movs	r3, #4
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e008      	b.n	800417e <UART_SetConfig+0x34e>
 800416c:	2308      	movs	r3, #8
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e005      	b.n	800417e <UART_SetConfig+0x34e>
 8004172:	2310      	movs	r3, #16
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	bf00      	nop
 8004178:	e001      	b.n	800417e <UART_SetConfig+0x34e>
 800417a:	2310      	movs	r3, #16
 800417c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004186:	d17f      	bne.n	8004288 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004188:	7ffb      	ldrb	r3, [r7, #31]
 800418a:	2b08      	cmp	r3, #8
 800418c:	d85c      	bhi.n	8004248 <UART_SetConfig+0x418>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <UART_SetConfig+0x364>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041d9 	.word	0x080041d9
 800419c:	080041f9 	.word	0x080041f9
 80041a0:	08004249 	.word	0x08004249
 80041a4:	08004211 	.word	0x08004211
 80041a8:	08004249 	.word	0x08004249
 80041ac:	08004249 	.word	0x08004249
 80041b0:	08004249 	.word	0x08004249
 80041b4:	08004231 	.word	0x08004231
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b8:	f7fe fed6 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 80041bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	005a      	lsls	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	61bb      	str	r3, [r7, #24]
        break;
 80041d6:	e03a      	b.n	800424e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7fe feda 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 80041dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	005a      	lsls	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	441a      	add	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	61bb      	str	r3, [r7, #24]
        break;
 80041f6:	e02a      	b.n	800424e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	085a      	lsrs	r2, r3, #1
 80041fe:	4b5f      	ldr	r3, [pc, #380]	; (800437c <UART_SetConfig+0x54c>)
 8004200:	4413      	add	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6852      	ldr	r2, [r2, #4]
 8004206:	fbb3 f3f2 	udiv	r3, r3, r2
 800420a:	b29b      	uxth	r3, r3
 800420c:	61bb      	str	r3, [r7, #24]
        break;
 800420e:	e01e      	b.n	800424e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004210:	f7fe fdec 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8004214:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	005a      	lsls	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	b29b      	uxth	r3, r3
 800422c:	61bb      	str	r3, [r7, #24]
        break;
 800422e:	e00e      	b.n	800424e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	b29b      	uxth	r3, r3
 8004244:	61bb      	str	r3, [r7, #24]
        break;
 8004246:	e002      	b.n	800424e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
        break;
 800424c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b0f      	cmp	r3, #15
 8004252:	d916      	bls.n	8004282 <UART_SetConfig+0x452>
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425a:	d212      	bcs.n	8004282 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f023 030f 	bic.w	r3, r3, #15
 8004264:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	b29a      	uxth	r2, r3
 8004272:	897b      	ldrh	r3, [r7, #10]
 8004274:	4313      	orrs	r3, r2
 8004276:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	897a      	ldrh	r2, [r7, #10]
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	e070      	b.n	8004364 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
 8004286:	e06d      	b.n	8004364 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004288:	7ffb      	ldrb	r3, [r7, #31]
 800428a:	2b08      	cmp	r3, #8
 800428c:	d859      	bhi.n	8004342 <UART_SetConfig+0x512>
 800428e:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <UART_SetConfig+0x464>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042d7 	.word	0x080042d7
 800429c:	080042f5 	.word	0x080042f5
 80042a0:	08004343 	.word	0x08004343
 80042a4:	0800430d 	.word	0x0800430d
 80042a8:	08004343 	.word	0x08004343
 80042ac:	08004343 	.word	0x08004343
 80042b0:	08004343 	.word	0x08004343
 80042b4:	0800432b 	.word	0x0800432b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7fe fe56 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 80042bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	085a      	lsrs	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	441a      	add	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	61bb      	str	r3, [r7, #24]
        break;
 80042d4:	e038      	b.n	8004348 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d6:	f7fe fe5b 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 80042da:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	085a      	lsrs	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	441a      	add	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	61bb      	str	r3, [r7, #24]
        break;
 80042f2:	e029      	b.n	8004348 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	085a      	lsrs	r2, r3, #1
 80042fa:	4b21      	ldr	r3, [pc, #132]	; (8004380 <UART_SetConfig+0x550>)
 80042fc:	4413      	add	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6852      	ldr	r2, [r2, #4]
 8004302:	fbb3 f3f2 	udiv	r3, r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	61bb      	str	r3, [r7, #24]
        break;
 800430a:	e01d      	b.n	8004348 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430c:	f7fe fd6e 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8004310:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	085a      	lsrs	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	441a      	add	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	b29b      	uxth	r3, r3
 8004326:	61bb      	str	r3, [r7, #24]
        break;
 8004328:	e00e      	b.n	8004348 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	b29b      	uxth	r3, r3
 800433e:	61bb      	str	r3, [r7, #24]
        break;
 8004340:	e002      	b.n	8004348 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
        break;
 8004346:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2b0f      	cmp	r3, #15
 800434c:	d908      	bls.n	8004360 <UART_SetConfig+0x530>
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004354:	d204      	bcs.n	8004360 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	e001      	b.n	8004364 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	01e84800 	.word	0x01e84800
 8004380:	00f42400 	.word	0x00f42400

08004384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01a      	beq.n	800449a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004482:	d10a      	bne.n	800449a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044d6:	f7fc fdbd 	bl	8001054 <HAL_GetTick>
 80044da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d10e      	bne.n	8004508 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f82a 	bl	8004552 <UART_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e020      	b.n	800454a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b04      	cmp	r3, #4
 8004514:	d10e      	bne.n	8004534 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004516:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f814 	bl	8004552 <UART_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e00a      	b.n	800454a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004562:	e05d      	b.n	8004620 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d059      	beq.n	8004620 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456c:	f7fc fd72 	bl	8001054 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <UART_WaitOnFlagUntilTimeout+0x30>
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11b      	bne.n	80045ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004590:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e042      	b.n	8004640 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d02b      	beq.n	8004620 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d6:	d123      	bne.n	8004620 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045e0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2220      	movs	r2, #32
 800460c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e00f      	b.n	8004640 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	429a      	cmp	r2, r3
 800463c:	d092      	beq.n	8004564 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800465e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff fbae 	bl	8003e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff fb8b 	bl	8003df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f103 0208 	add.w	r2, r3, #8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295
 80046fe:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f103 0208 	add.w	r2, r3, #8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f103 0208 	add.w	r2, r3, #8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	601a      	str	r2, [r3, #0]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d103      	bne.n	80047a8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e00c      	b.n	80047c2 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3308      	adds	r3, #8
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e002      	b.n	80047b6 <vListInsert+0x2e>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d2f6      	bcs.n	80047b0 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6892      	ldr	r2, [r2, #8]
 8004810:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6852      	ldr	r2, [r2, #4]
 800481a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d103      	bne.n	800482e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	1e5a      	subs	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	b672      	cpsid	i
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	b662      	cpsie	i
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	e7fe      	b.n	800487a <xQueueGenericReset+0x2a>

    taskENTER_CRITICAL();
 800487c:	f001 ff4e 	bl	800671c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	441a      	add	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	3b01      	subs	r3, #1
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	441a      	add	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	22ff      	movs	r2, #255	; 0xff
 80048c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	22ff      	movs	r2, #255	; 0xff
 80048c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d114      	bne.n	80048fc <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01a      	beq.n	8004910 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3310      	adds	r3, #16
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f888 	bl	80059f4 <xTaskRemoveFromEventList>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d012      	beq.n	8004910 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <xQueueGenericReset+0xd0>)
 80048ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	e009      	b.n	8004910 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3310      	adds	r3, #16
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff fef0 	bl	80046e6 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3324      	adds	r3, #36	; 0x24
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff feeb 	bl	80046e6 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004910:	f001 ff36 	bl	8006780 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004914:	2301      	movs	r3, #1
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	e000ed04 	.word	0xe000ed04

08004924 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004924:	b580      	push	{r7, lr}
 8004926:	b08c      	sub	sp, #48	; 0x30
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <xQueueGenericCreate+0x2c>
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	b672      	cpsid	i
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	b662      	cpsie	i
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	e7fe      	b.n	800494e <xQueueGenericCreate+0x2a>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	fb02 f303 	mul.w	r3, r2, r3
 8004958:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <xQueueGenericCreate+0x4a>
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	429a      	cmp	r2, r3
 800496c:	d101      	bne.n	8004972 <xQueueGenericCreate+0x4e>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueGenericCreate+0x50>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <xQueueGenericCreate+0x6c>
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	b672      	cpsid	i
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	b662      	cpsie	i
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	e7fe      	b.n	800498e <xQueueGenericCreate+0x6a>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8004996:	d90b      	bls.n	80049b0 <xQueueGenericCreate+0x8c>
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	b672      	cpsid	i
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	b662      	cpsie	i
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	e7fe      	b.n	80049ae <xQueueGenericCreate+0x8a>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	3348      	adds	r3, #72	; 0x48
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 ffdb 	bl	8006970 <pvPortMalloc>
 80049ba:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3348      	adds	r3, #72	; 0x48
 80049ca:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049cc:	79fa      	ldrb	r2, [r7, #7]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f805 	bl	80049e8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80049de:	6a3b      	ldr	r3, [r7, #32]
    }
 80049e0:	4618      	mov	r0, r3
 80049e2:	3728      	adds	r7, #40	; 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e002      	b.n	8004a0a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a16:	2101      	movs	r1, #1
 8004a18:	69b8      	ldr	r0, [r7, #24]
 8004a1a:	f7ff ff19 	bl	8004850 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08e      	sub	sp, #56	; 0x38
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a36:	2300      	movs	r3, #0
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <xQueueGenericSend+0x34>
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	b672      	cpsid	i
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	b662      	cpsie	i
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5a:	e7fe      	b.n	8004a5a <xQueueGenericSend+0x32>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d103      	bne.n	8004a6a <xQueueGenericSend+0x42>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <xQueueGenericSend+0x46>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <xQueueGenericSend+0x48>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <xQueueGenericSend+0x64>
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	b672      	cpsid	i
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	b662      	cpsie	i
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8a:	e7fe      	b.n	8004a8a <xQueueGenericSend+0x62>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d103      	bne.n	8004a9a <xQueueGenericSend+0x72>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <xQueueGenericSend+0x76>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <xQueueGenericSend+0x78>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <xQueueGenericSend+0x94>
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	b672      	cpsid	i
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	b662      	cpsie	i
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	e7fe      	b.n	8004aba <xQueueGenericSend+0x92>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004abc:	f001 f928 	bl	8005d10 <xTaskGetSchedulerState>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <xQueueGenericSend+0xa4>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <xQueueGenericSend+0xa8>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <xQueueGenericSend+0xaa>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <xQueueGenericSend+0xc6>
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	b672      	cpsid	i
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	b662      	cpsie	i
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	e7fe      	b.n	8004aec <xQueueGenericSend+0xc4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004aee:	f001 fe15 	bl	800671c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <xQueueGenericSend+0xdc>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d129      	bne.n	8004b58 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b0a:	f000 fa21 	bl	8004f50 <prvCopyDataToQueue>
 8004b0e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	3324      	adds	r3, #36	; 0x24
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 ff69 	bl	80059f4 <xTaskRemoveFromEventList>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d013      	beq.n	8004b50 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004b28:	4b3f      	ldr	r3, [pc, #252]	; (8004c28 <xQueueGenericSend+0x200>)
 8004b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	e00a      	b.n	8004b50 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004b40:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <xQueueGenericSend+0x200>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004b50:	f001 fe16 	bl	8006780 <vPortExitCritical>
                return pdPASS;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e063      	b.n	8004c20 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004b5e:	f001 fe0f 	bl	8006780 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e05c      	b.n	8004c20 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 ffa3 	bl	8005abc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004b76:	2301      	movs	r3, #1
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004b7a:	f001 fe01 	bl	8006780 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004b7e:	f000 fd21 	bl	80055c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004b82:	f001 fdcb 	bl	800671c <vPortEnterCritical>
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d103      	bne.n	8004b9c <xQueueGenericSend+0x174>
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba2:	b25b      	sxtb	r3, r3
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d103      	bne.n	8004bb2 <xQueueGenericSend+0x18a>
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb2:	f001 fde5 	bl	8006780 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb6:	1d3a      	adds	r2, r7, #4
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 ff92 	bl	8005ae8 <xTaskCheckForTimeOut>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d124      	bne.n	8004c14 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bcc:	f000 fab8 	bl	8005140 <prvIsQueueFull>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d018      	beq.n	8004c08 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	3310      	adds	r3, #16
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 feb6 	bl	8005950 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004be6:	f000 fa43 	bl	8005070 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004bea:	f000 fcf9 	bl	80055e0 <xTaskResumeAll>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f af7c 	bne.w	8004aee <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <xQueueGenericSend+0x200>)
 8004bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	e772      	b.n	8004aee <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c0a:	f000 fa31 	bl	8005070 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004c0e:	f000 fce7 	bl	80055e0 <xTaskResumeAll>
 8004c12:	e76c      	b.n	8004aee <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c16:	f000 fa2b 	bl	8005070 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004c1a:	f000 fce1 	bl	80055e0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004c1e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3738      	adds	r7, #56	; 0x38
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b090      	sub	sp, #64	; 0x40
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <xQueueGenericSendFromISR+0x30>
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	b672      	cpsid	i
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	b662      	cpsie	i
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5a:	e7fe      	b.n	8004c5a <xQueueGenericSendFromISR+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <xQueueGenericSendFromISR+0x3e>
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <xQueueGenericSendFromISR+0x42>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <xQueueGenericSendFromISR+0x44>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <xQueueGenericSendFromISR+0x60>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	b672      	cpsid	i
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	b662      	cpsie	i
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8a:	e7fe      	b.n	8004c8a <xQueueGenericSendFromISR+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d103      	bne.n	8004c9a <xQueueGenericSendFromISR+0x6e>
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <xQueueGenericSendFromISR+0x72>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <xQueueGenericSendFromISR+0x74>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <xQueueGenericSendFromISR+0x90>
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	b672      	cpsid	i
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	b662      	cpsie	i
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	e7fe      	b.n	8004cba <xQueueGenericSendFromISR+0x8e>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cbc:	f001 fe16 	bl	80068ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004cc0:	f3ef 8211 	mrs	r2, BASEPRI
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	b672      	cpsid	i
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	b662      	cpsie	i
 8004cd8:	61fa      	str	r2, [r7, #28]
 8004cda:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cde:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d302      	bcc.n	8004cf2 <xQueueGenericSendFromISR+0xc6>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d13f      	bne.n	8004d72 <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d08:	f000 f922 	bl	8004f50 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004d0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d112      	bne.n	8004d3c <xQueueGenericSendFromISR+0x110>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d026      	beq.n	8004d6c <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	3324      	adds	r3, #36	; 0x24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fe66 	bl	80059f4 <xTaskRemoveFromEventList>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01e      	beq.n	8004d6c <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01b      	beq.n	8004d6c <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e017      	b.n	8004d6c <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004d3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d40:	2b7f      	cmp	r3, #127	; 0x7f
 8004d42:	d10b      	bne.n	8004d5c <xQueueGenericSendFromISR+0x130>
        __asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	b672      	cpsid	i
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	b662      	cpsie	i
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e7fe      	b.n	8004d5a <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d60:	3301      	adds	r3, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	b25a      	sxtb	r2, r3
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004d70:	e001      	b.n	8004d76 <xQueueGenericSendFromISR+0x14a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d78:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3740      	adds	r7, #64	; 0x40
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08c      	sub	sp, #48	; 0x30
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10b      	bne.n	8004dbe <xQueueReceive+0x32>
        __asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	b672      	cpsid	i
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	b662      	cpsie	i
 8004dba:	623b      	str	r3, [r7, #32]
 8004dbc:	e7fe      	b.n	8004dbc <xQueueReceive+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d103      	bne.n	8004dcc <xQueueReceive+0x40>
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <xQueueReceive+0x44>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <xQueueReceive+0x46>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <xQueueReceive+0x62>
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	b672      	cpsid	i
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	b662      	cpsie	i
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	e7fe      	b.n	8004dec <xQueueReceive+0x60>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dee:	f000 ff8f 	bl	8005d10 <xTaskGetSchedulerState>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d102      	bne.n	8004dfe <xQueueReceive+0x72>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <xQueueReceive+0x76>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <xQueueReceive+0x78>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <xQueueReceive+0x94>
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	b672      	cpsid	i
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	b662      	cpsie	i
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	e7fe      	b.n	8004e1e <xQueueReceive+0x92>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004e20:	f001 fc7c 	bl	800671c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01f      	beq.n	8004e70 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e34:	f000 f8f6 	bl	8005024 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	1e5a      	subs	r2, r3, #1
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00f      	beq.n	8004e68 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	3310      	adds	r3, #16
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fdd1 	bl	80059f4 <xTaskRemoveFromEventList>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004e58:	4b3c      	ldr	r3, [pc, #240]	; (8004f4c <xQueueReceive+0x1c0>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004e68:	f001 fc8a 	bl	8006780 <vPortExitCritical>
                return pdPASS;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e069      	b.n	8004f44 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004e76:	f001 fc83 	bl	8006780 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e062      	b.n	8004f44 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004e84:	f107 0310 	add.w	r3, r7, #16
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fe17 	bl	8005abc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004e92:	f001 fc75 	bl	8006780 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004e96:	f000 fb95 	bl	80055c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004e9a:	f001 fc3f 	bl	800671c <vPortEnterCritical>
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d103      	bne.n	8004eb4 <xQueueReceive+0x128>
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eba:	b25b      	sxtb	r3, r3
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d103      	bne.n	8004eca <xQueueReceive+0x13e>
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eca:	f001 fc59 	bl	8006780 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ece:	1d3a      	adds	r2, r7, #4
 8004ed0:	f107 0310 	add.w	r3, r7, #16
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fe06 	bl	8005ae8 <xTaskCheckForTimeOut>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d123      	bne.n	8004f2a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee4:	f000 f916 	bl	8005114 <prvIsQueueEmpty>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d017      	beq.n	8004f1e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	3324      	adds	r3, #36	; 0x24
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fd2a 	bl	8005950 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efe:	f000 f8b7 	bl	8005070 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004f02:	f000 fb6d 	bl	80055e0 <xTaskResumeAll>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d189      	bne.n	8004e20 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <xQueueReceive+0x1c0>)
 8004f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	e780      	b.n	8004e20 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f20:	f000 f8a6 	bl	8005070 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004f24:	f000 fb5c 	bl	80055e0 <xTaskResumeAll>
 8004f28:	e77a      	b.n	8004e20 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f2c:	f000 f8a0 	bl	8005070 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004f30:	f000 fb56 	bl	80055e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f36:	f000 f8ed 	bl	8005114 <prvIsQueueEmpty>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f43f af6f 	beq.w	8004e20 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004f42:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3730      	adds	r7, #48	; 0x30
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10d      	bne.n	8004f8a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d14d      	bne.n	8005012 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fee6 	bl	8005d4c <xTaskPriorityDisinherit>
 8004f80:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	e043      	b.n	8005012 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d119      	bne.n	8004fc4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6858      	ldr	r0, [r3, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	461a      	mov	r2, r3
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	f001 ff14 	bl	8006dc8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	441a      	add	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d32b      	bcc.n	8005012 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	605a      	str	r2, [r3, #4]
 8004fc2:	e026      	b.n	8005012 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68d8      	ldr	r0, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	f001 fefa 	bl	8006dc8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	425b      	negs	r3, r3
 8004fde:	441a      	add	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d207      	bcs.n	8005000 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	425b      	negs	r3, r3
 8004ffa:	441a      	add	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d105      	bne.n	8005012 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	3b01      	subs	r3, #1
 8005010:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800501a:	697b      	ldr	r3, [r7, #20]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d018      	beq.n	8005068 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	441a      	add	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	d303      	bcc.n	8005058 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68d9      	ldr	r1, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	461a      	mov	r2, r3
 8005062:	6838      	ldr	r0, [r7, #0]
 8005064:	f001 feb0 	bl	8006dc8 <memcpy>
    }
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005078:	f001 fb50 	bl	800671c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005082:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005084:	e011      	b.n	80050aa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d012      	beq.n	80050b4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3324      	adds	r3, #36	; 0x24
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fcae 	bl	80059f4 <xTaskRemoveFromEventList>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800509e:	f000 fd8b 	bl	8005bb8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80050aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	dce9      	bgt.n	8005086 <prvUnlockQueue+0x16>
 80050b2:	e000      	b.n	80050b6 <prvUnlockQueue+0x46>
                        break;
 80050b4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	22ff      	movs	r2, #255	; 0xff
 80050ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80050be:	f001 fb5f 	bl	8006780 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80050c2:	f001 fb2b 	bl	800671c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050cc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80050ce:	e011      	b.n	80050f4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d012      	beq.n	80050fe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3310      	adds	r3, #16
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fc89 	bl	80059f4 <xTaskRemoveFromEventList>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80050e8:	f000 fd66 	bl	8005bb8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80050ec:	7bbb      	ldrb	r3, [r7, #14]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80050f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dce9      	bgt.n	80050d0 <prvUnlockQueue+0x60>
 80050fc:	e000      	b.n	8005100 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80050fe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	22ff      	movs	r2, #255	; 0xff
 8005104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005108:	f001 fb3a 	bl	8006780 <vPortExitCritical>
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800511c:	f001 fafe 	bl	800671c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e001      	b.n	8005132 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005132:	f001 fb25 	bl	8006780 <vPortExitCritical>

    return xReturn;
 8005136:	68fb      	ldr	r3, [r7, #12]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005148:	f001 fae8 	bl	800671c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005154:	429a      	cmp	r2, r3
 8005156:	d102      	bne.n	800515e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e001      	b.n	8005162 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005162:	f001 fb0d 	bl	8006780 <vPortExitCritical>

    return xReturn;
 8005166:	68fb      	ldr	r3, [r7, #12]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e014      	b.n	80051aa <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005180:	4a0e      	ldr	r2, [pc, #56]	; (80051bc <vQueueAddToRegistry+0x4c>)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800518c:	490b      	ldr	r1, [pc, #44]	; (80051bc <vQueueAddToRegistry+0x4c>)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005196:	4a09      	ldr	r2, [pc, #36]	; (80051bc <vQueueAddToRegistry+0x4c>)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4413      	add	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80051a2:	e005      	b.n	80051b0 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b09      	cmp	r3, #9
 80051ae:	d9e7      	bls.n	8005180 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20020334 	.word	0x20020334

080051c0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80051d0:	f001 faa4 	bl	800671c <vPortEnterCritical>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051da:	b25b      	sxtb	r3, r3
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d103      	bne.n	80051ea <vQueueWaitForMessageRestricted+0x2a>
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f0:	b25b      	sxtb	r3, r3
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d103      	bne.n	8005200 <vQueueWaitForMessageRestricted+0x40>
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005200:	f001 fabe 	bl	8006780 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	3324      	adds	r3, #36	; 0x24
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fbc1 	bl	800599c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800521a:	6978      	ldr	r0, [r7, #20]
 800521c:	f7ff ff28 	bl	8005070 <prvUnlockQueue>
    }
 8005220:	bf00      	nop
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005228:	b580      	push	{r7, lr}
 800522a:	b08c      	sub	sp, #48	; 0x30
 800522c:	af04      	add	r7, sp, #16
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4618      	mov	r0, r3
 800523e:	f001 fb97 	bl	8006970 <pvPortMalloc>
 8005242:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800524a:	2070      	movs	r0, #112	; 0x70
 800524c:	f001 fb90 	bl	8006970 <pvPortMalloc>
 8005250:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
 800525e:	e005      	b.n	800526c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005260:	6978      	ldr	r0, [r7, #20]
 8005262:	f001 fc67 	bl	8006b34 <vPortFree>
 8005266:	e001      	b.n	800526c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d013      	beq.n	800529a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	2300      	movs	r3, #0
 8005276:	9303      	str	r3, [sp, #12]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	9302      	str	r3, [sp, #8]
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f80e 	bl	80052aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800528e:	69f8      	ldr	r0, [r7, #28]
 8005290:	f000 f8a2 	bl	80053d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005294:	2301      	movs	r3, #1
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	e002      	b.n	80052a0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800529a:	f04f 33ff 	mov.w	r3, #4294967295
 800529e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80052a0:	69bb      	ldr	r3, [r7, #24]
    }
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b088      	sub	sp, #32
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80052c2:	440b      	add	r3, r1
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f023 0307 	bic.w	r3, r3, #7
 80052d0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00b      	beq.n	80052f4 <prvInitialiseNewTask+0x4a>
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	b672      	cpsid	i
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	b662      	cpsie	i
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	e7fe      	b.n	80052f2 <prvInitialiseNewTask+0x48>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01f      	beq.n	800533a <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	e012      	b.n	8005326 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	7819      	ldrb	r1, [r3, #0]
 8005308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	3334      	adds	r3, #52	; 0x34
 8005310:	460a      	mov	r2, r1
 8005312:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d006      	beq.n	800532e <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b0f      	cmp	r3, #15
 800532a:	d9e9      	bls.n	8005300 <prvInitialiseNewTask+0x56>
 800532c:	e000      	b.n	8005330 <prvInitialiseNewTask+0x86>
            {
                break;
 800532e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005338:	e003      	b.n	8005342 <prvInitialiseNewTask+0x98>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	2b04      	cmp	r3, #4
 8005346:	d901      	bls.n	800534c <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005348:	2304      	movs	r3, #4
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005350:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005356:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2200      	movs	r2, #0
 800535c:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	3304      	adds	r3, #4
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff f9df 	bl	8004726 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	3318      	adds	r3, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff f9da 	bl	8004726 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005376:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	f1c3 0205 	rsb	r2, r3, #5
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005386:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	334c      	adds	r3, #76	; 0x4c
 800538c:	2214      	movs	r2, #20
 800538e:	2100      	movs	r1, #0
 8005390:	4618      	mov	r0, r3
 8005392:	f001 fd24 	bl	8006dde <memset>
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	3360      	adds	r3, #96	; 0x60
 800539a:	220c      	movs	r2, #12
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 fd1d 	bl	8006dde <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	336c      	adds	r3, #108	; 0x6c
 80053a8:	2203      	movs	r2, #3
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fd16 	bl	8006dde <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	68f9      	ldr	r1, [r7, #12]
 80053b6:	69b8      	ldr	r0, [r7, #24]
 80053b8:	f001 f8a4 	bl	8006504 <pxPortInitialiseStack>
 80053bc:	4602      	mov	r2, r0
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80053ce:	bf00      	nop
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80053e0:	f001 f99c 	bl	800671c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80053e4:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <prvAddNewTaskToReadyList+0xbc>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3301      	adds	r3, #1
 80053ea:	4a2a      	ldr	r2, [pc, #168]	; (8005494 <prvAddNewTaskToReadyList+0xbc>)
 80053ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80053ee:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <prvAddNewTaskToReadyList+0xc0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80053f6:	4a28      	ldr	r2, [pc, #160]	; (8005498 <prvAddNewTaskToReadyList+0xc0>)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <prvAddNewTaskToReadyList+0xbc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d110      	bne.n	8005426 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005404:	f000 fbec 	bl	8005be0 <prvInitialiseTaskLists>
 8005408:	e00d      	b.n	8005426 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <prvAddNewTaskToReadyList+0xc4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005412:	4b21      	ldr	r3, [pc, #132]	; (8005498 <prvAddNewTaskToReadyList+0xc0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	429a      	cmp	r2, r3
 800541e:	d802      	bhi.n	8005426 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005420:	4a1d      	ldr	r2, [pc, #116]	; (8005498 <prvAddNewTaskToReadyList+0xc0>)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005426:	4b1e      	ldr	r3, [pc, #120]	; (80054a0 <prvAddNewTaskToReadyList+0xc8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <prvAddNewTaskToReadyList+0xc8>)
 800542e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <prvAddNewTaskToReadyList+0xcc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d903      	bls.n	8005444 <prvAddNewTaskToReadyList+0x6c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	4a18      	ldr	r2, [pc, #96]	; (80054a4 <prvAddNewTaskToReadyList+0xcc>)
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <prvAddNewTaskToReadyList+0xd0>)
 8005452:	441a      	add	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f7ff f970 	bl	8004740 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005460:	f001 f98e 	bl	8006780 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <prvAddNewTaskToReadyList+0xc4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <prvAddNewTaskToReadyList+0xb2>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800546c:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <prvAddNewTaskToReadyList+0xc0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	429a      	cmp	r2, r3
 8005478:	d207      	bcs.n	800548a <prvAddNewTaskToReadyList+0xb2>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <prvAddNewTaskToReadyList+0xd4>)
 800547c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000170 	.word	0x20000170
 8005498:	20000098 	.word	0x20000098
 800549c:	2000017c 	.word	0x2000017c
 80054a0:	2000018c 	.word	0x2000018c
 80054a4:	20000178 	.word	0x20000178
 80054a8:	2000009c 	.word	0x2000009c
 80054ac:	e000ed04 	.word	0xe000ed04

080054b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d018      	beq.n	80054f4 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <vTaskDelay+0x64>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <vTaskDelay+0x32>
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	b672      	cpsid	i
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	b662      	cpsie	i
 80054de:	60bb      	str	r3, [r7, #8]
 80054e0:	e7fe      	b.n	80054e0 <vTaskDelay+0x30>
            vTaskSuspendAll();
 80054e2:	f000 f86f 	bl	80055c4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054e6:	2100      	movs	r1, #0
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fc9f 	bl	8005e2c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80054ee:	f000 f877 	bl	80055e0 <xTaskResumeAll>
 80054f2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d107      	bne.n	800550a <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <vTaskDelay+0x68>)
 80054fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000198 	.word	0x20000198
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005522:	4b21      	ldr	r3, [pc, #132]	; (80055a8 <vTaskStartScheduler+0x8c>)
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	2300      	movs	r3, #0
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	2300      	movs	r3, #0
 800552c:	2280      	movs	r2, #128	; 0x80
 800552e:	491f      	ldr	r1, [pc, #124]	; (80055ac <vTaskStartScheduler+0x90>)
 8005530:	481f      	ldr	r0, [pc, #124]	; (80055b0 <vTaskStartScheduler+0x94>)
 8005532:	f7ff fe79 	bl	8005228 <xTaskCreate>
 8005536:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d102      	bne.n	8005544 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800553e:	f000 fcc9 	bl	8005ed4 <xTimerCreateTimerTask>
 8005542:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d117      	bne.n	800557a <vTaskStartScheduler+0x5e>
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	b672      	cpsid	i
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	b662      	cpsie	i
 800555e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005560:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <vTaskStartScheduler+0x98>)
 8005562:	f04f 32ff 	mov.w	r2, #4294967295
 8005566:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005568:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <vTaskStartScheduler+0x9c>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <vTaskStartScheduler+0xa0>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005574:	f001 f856 	bl	8006624 <xPortStartScheduler>
 8005578:	e00f      	b.n	800559a <vTaskStartScheduler+0x7e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d10b      	bne.n	800559a <vTaskStartScheduler+0x7e>
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	b672      	cpsid	i
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	b662      	cpsie	i
 8005596:	607b      	str	r3, [r7, #4]
 8005598:	e7fe      	b.n	8005598 <vTaskStartScheduler+0x7c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <vTaskStartScheduler+0xa4>)
 800559c:	681b      	ldr	r3, [r3, #0]
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000194 	.word	0x20000194
 80055ac:	0800773c 	.word	0x0800773c
 80055b0:	08005bd1 	.word	0x08005bd1
 80055b4:	20000190 	.word	0x20000190
 80055b8:	2000017c 	.word	0x2000017c
 80055bc:	20000174 	.word	0x20000174
 80055c0:	2000000c 	.word	0x2000000c

080055c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80055c8:	4b04      	ldr	r3, [pc, #16]	; (80055dc <vTaskSuspendAll+0x18>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	4a03      	ldr	r2, [pc, #12]	; (80055dc <vTaskSuspendAll+0x18>)
 80055d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80055d2:	bf00      	nop
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	20000198 	.word	0x20000198

080055e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80055ee:	4b42      	ldr	r3, [pc, #264]	; (80056f8 <xTaskResumeAll+0x118>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <xTaskResumeAll+0x2e>
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	b672      	cpsid	i
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	b662      	cpsie	i
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	e7fe      	b.n	800560c <xTaskResumeAll+0x2c>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800560e:	f001 f885 	bl	800671c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005612:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <xTaskResumeAll+0x118>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	4a37      	ldr	r2, [pc, #220]	; (80056f8 <xTaskResumeAll+0x118>)
 800561a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800561c:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <xTaskResumeAll+0x118>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d162      	bne.n	80056ea <xTaskResumeAll+0x10a>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005624:	4b35      	ldr	r3, [pc, #212]	; (80056fc <xTaskResumeAll+0x11c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d05e      	beq.n	80056ea <xTaskResumeAll+0x10a>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800562c:	e02f      	b.n	800568e <xTaskResumeAll+0xae>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562e:	4b34      	ldr	r3, [pc, #208]	; (8005700 <xTaskResumeAll+0x120>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3318      	adds	r3, #24
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff f8dd 	bl	80047fa <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3304      	adds	r3, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff f8d8 	bl	80047fa <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	4b2d      	ldr	r3, [pc, #180]	; (8005704 <xTaskResumeAll+0x124>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d903      	bls.n	800565e <xTaskResumeAll+0x7e>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <xTaskResumeAll+0x124>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4a27      	ldr	r2, [pc, #156]	; (8005708 <xTaskResumeAll+0x128>)
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3304      	adds	r3, #4
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f7ff f863 	bl	8004740 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	4b23      	ldr	r3, [pc, #140]	; (800570c <xTaskResumeAll+0x12c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	429a      	cmp	r2, r3
 8005686:	d302      	bcc.n	800568e <xTaskResumeAll+0xae>
                    {
                        xYieldPending = pdTRUE;
 8005688:	4b21      	ldr	r3, [pc, #132]	; (8005710 <xTaskResumeAll+0x130>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800568e:	4b1c      	ldr	r3, [pc, #112]	; (8005700 <xTaskResumeAll+0x120>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1cb      	bne.n	800562e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <xTaskResumeAll+0xc0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800569c:	f000 fb1c 	bl	8005cd8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056a0:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <xTaskResumeAll+0x134>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <xTaskResumeAll+0xee>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80056ac:	f000 f846 	bl	800573c <xTaskIncrementTick>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <xTaskResumeAll+0xdc>
                            {
                                xYieldPending = pdTRUE;
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <xTaskResumeAll+0x130>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3b01      	subs	r3, #1
 80056c0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f1      	bne.n	80056ac <xTaskResumeAll+0xcc>

                        xPendedTicks = 0;
 80056c8:	4b12      	ldr	r3, [pc, #72]	; (8005714 <xTaskResumeAll+0x134>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80056ce:	4b10      	ldr	r3, [pc, #64]	; (8005710 <xTaskResumeAll+0x130>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <xTaskResumeAll+0x10a>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <xTaskResumeAll+0x138>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80056ea:	f001 f849 	bl	8006780 <vPortExitCritical>

    return xAlreadyYielded;
 80056ee:	68bb      	ldr	r3, [r7, #8]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000198 	.word	0x20000198
 80056fc:	20000170 	.word	0x20000170
 8005700:	20000130 	.word	0x20000130
 8005704:	20000178 	.word	0x20000178
 8005708:	2000009c 	.word	0x2000009c
 800570c:	20000098 	.word	0x20000098
 8005710:	20000184 	.word	0x20000184
 8005714:	20000180 	.word	0x20000180
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <xTaskGetTickCount+0x1c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005728:	687b      	ldr	r3, [r7, #4]
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000174 	.word	0x20000174

0800573c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005746:	4b48      	ldr	r3, [pc, #288]	; (8005868 <xTaskIncrementTick+0x12c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 8082 	bne.w	8005854 <xTaskIncrementTick+0x118>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005750:	4b46      	ldr	r3, [pc, #280]	; (800586c <xTaskIncrementTick+0x130>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005758:	4a44      	ldr	r2, [pc, #272]	; (800586c <xTaskIncrementTick+0x130>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d121      	bne.n	80057a8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005764:	4b42      	ldr	r3, [pc, #264]	; (8005870 <xTaskIncrementTick+0x134>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <xTaskIncrementTick+0x4a>
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	b672      	cpsid	i
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	b662      	cpsie	i
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	e7fe      	b.n	8005784 <xTaskIncrementTick+0x48>
 8005786:	4b3a      	ldr	r3, [pc, #232]	; (8005870 <xTaskIncrementTick+0x134>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	4b39      	ldr	r3, [pc, #228]	; (8005874 <xTaskIncrementTick+0x138>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a37      	ldr	r2, [pc, #220]	; (8005870 <xTaskIncrementTick+0x134>)
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	4a37      	ldr	r2, [pc, #220]	; (8005874 <xTaskIncrementTick+0x138>)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4b37      	ldr	r3, [pc, #220]	; (8005878 <xTaskIncrementTick+0x13c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	4a35      	ldr	r2, [pc, #212]	; (8005878 <xTaskIncrementTick+0x13c>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	f000 fa98 	bl	8005cd8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80057a8:	4b34      	ldr	r3, [pc, #208]	; (800587c <xTaskIncrementTick+0x140>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d349      	bcc.n	8005846 <xTaskIncrementTick+0x10a>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b2:	4b2f      	ldr	r3, [pc, #188]	; (8005870 <xTaskIncrementTick+0x134>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057bc:	4b2f      	ldr	r3, [pc, #188]	; (800587c <xTaskIncrementTick+0x140>)
 80057be:	f04f 32ff 	mov.w	r2, #4294967295
 80057c2:	601a      	str	r2, [r3, #0]
                    break;
 80057c4:	e03f      	b.n	8005846 <xTaskIncrementTick+0x10a>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c6:	4b2a      	ldr	r3, [pc, #168]	; (8005870 <xTaskIncrementTick+0x134>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d203      	bcs.n	80057e6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80057de:	4a27      	ldr	r2, [pc, #156]	; (800587c <xTaskIncrementTick+0x140>)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057e4:	e02f      	b.n	8005846 <xTaskIncrementTick+0x10a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff f805 	bl	80047fa <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	3318      	adds	r3, #24
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe fffc 	bl	80047fa <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005806:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <xTaskIncrementTick+0x144>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d903      	bls.n	8005816 <xTaskIncrementTick+0xda>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <xTaskIncrementTick+0x144>)
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <xTaskIncrementTick+0x148>)
 8005824:	441a      	add	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	3304      	adds	r3, #4
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fe ff87 	bl	8004740 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <xTaskIncrementTick+0x14c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	429a      	cmp	r2, r3
 800583e:	d3b8      	bcc.n	80057b2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005844:	e7b5      	b.n	80057b2 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005846:	4b11      	ldr	r3, [pc, #68]	; (800588c <xTaskIncrementTick+0x150>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800584e:	2301      	movs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e004      	b.n	800585e <xTaskIncrementTick+0x122>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005854:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <xTaskIncrementTick+0x154>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <xTaskIncrementTick+0x154>)
 800585c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800585e:	697b      	ldr	r3, [r7, #20]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000198 	.word	0x20000198
 800586c:	20000174 	.word	0x20000174
 8005870:	20000128 	.word	0x20000128
 8005874:	2000012c 	.word	0x2000012c
 8005878:	20000188 	.word	0x20000188
 800587c:	20000190 	.word	0x20000190
 8005880:	20000178 	.word	0x20000178
 8005884:	2000009c 	.word	0x2000009c
 8005888:	20000098 	.word	0x20000098
 800588c:	20000184 	.word	0x20000184
 8005890:	20000180 	.word	0x20000180

08005894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800589a:	4b28      	ldr	r3, [pc, #160]	; (800593c <vTaskSwitchContext+0xa8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80058a2:	4b27      	ldr	r3, [pc, #156]	; (8005940 <vTaskSwitchContext+0xac>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80058a8:	e042      	b.n	8005930 <vTaskSwitchContext+0x9c>
        xYieldPending = pdFALSE;
 80058aa:	4b25      	ldr	r3, [pc, #148]	; (8005940 <vTaskSwitchContext+0xac>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b0:	4b24      	ldr	r3, [pc, #144]	; (8005944 <vTaskSwitchContext+0xb0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e011      	b.n	80058dc <vTaskSwitchContext+0x48>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <vTaskSwitchContext+0x42>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	b672      	cpsid	i
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	b662      	cpsie	i
 80058d2:	607b      	str	r3, [r7, #4]
 80058d4:	e7fe      	b.n	80058d4 <vTaskSwitchContext+0x40>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3b01      	subs	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	491a      	ldr	r1, [pc, #104]	; (8005948 <vTaskSwitchContext+0xb4>)
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0e3      	beq.n	80058b8 <vTaskSwitchContext+0x24>
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <vTaskSwitchContext+0xb4>)
 80058fc:	4413      	add	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	3308      	adds	r3, #8
 8005912:	429a      	cmp	r2, r3
 8005914:	d104      	bne.n	8005920 <vTaskSwitchContext+0x8c>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	4a09      	ldr	r2, [pc, #36]	; (800594c <vTaskSwitchContext+0xb8>)
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	4a06      	ldr	r2, [pc, #24]	; (8005944 <vTaskSwitchContext+0xb0>)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6013      	str	r3, [r2, #0]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	20000198 	.word	0x20000198
 8005940:	20000184 	.word	0x20000184
 8005944:	20000178 	.word	0x20000178
 8005948:	2000009c 	.word	0x2000009c
 800594c:	20000098 	.word	0x20000098

08005950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10b      	bne.n	8005978 <vTaskPlaceOnEventList+0x28>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	b672      	cpsid	i
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	b662      	cpsie	i
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	e7fe      	b.n	8005976 <vTaskPlaceOnEventList+0x26>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005978:	4b07      	ldr	r3, [pc, #28]	; (8005998 <vTaskPlaceOnEventList+0x48>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3318      	adds	r3, #24
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7fe ff01 	bl	8004788 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005986:	2101      	movs	r1, #1
 8005988:	6838      	ldr	r0, [r7, #0]
 800598a:	f000 fa4f 	bl	8005e2c <prvAddCurrentTaskToDelayedList>
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000098 	.word	0x20000098

0800599c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <vTaskPlaceOnEventListRestricted+0x2a>
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	b672      	cpsid	i
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	b662      	cpsie	i
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e7fe      	b.n	80059c4 <vTaskPlaceOnEventListRestricted+0x28>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3318      	adds	r3, #24
 80059cc:	4619      	mov	r1, r3
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7fe feb6 	bl	8004740 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80059da:	f04f 33ff 	mov.w	r3, #4294967295
 80059de:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	68b8      	ldr	r0, [r7, #8]
 80059e4:	f000 fa22 	bl	8005e2c <prvAddCurrentTaskToDelayedList>
    }
 80059e8:	bf00      	nop
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000098 	.word	0x20000098

080059f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <xTaskRemoveFromEventList+0x2e>
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	b672      	cpsid	i
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	b662      	cpsie	i
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e7fe      	b.n	8005a20 <xTaskRemoveFromEventList+0x2c>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	3318      	adds	r3, #24
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe fee7 	bl	80047fa <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <xTaskRemoveFromEventList+0xb0>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11d      	bne.n	8005a70 <xTaskRemoveFromEventList+0x7c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe fede 	bl	80047fa <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <xTaskRemoveFromEventList+0xb4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d903      	bls.n	8005a52 <xTaskRemoveFromEventList+0x5e>
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	4a16      	ldr	r2, [pc, #88]	; (8005aa8 <xTaskRemoveFromEventList+0xb4>)
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4a13      	ldr	r2, [pc, #76]	; (8005aac <xTaskRemoveFromEventList+0xb8>)
 8005a60:	441a      	add	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7fe fe69 	bl	8004740 <vListInsertEnd>
 8005a6e:	e005      	b.n	8005a7c <xTaskRemoveFromEventList+0x88>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	3318      	adds	r3, #24
 8005a74:	4619      	mov	r1, r3
 8005a76:	480e      	ldr	r0, [pc, #56]	; (8005ab0 <xTaskRemoveFromEventList+0xbc>)
 8005a78:	f7fe fe62 	bl	8004740 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <xTaskRemoveFromEventList+0xc0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d905      	bls.n	8005a96 <xTaskRemoveFromEventList+0xa2>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <xTaskRemoveFromEventList+0xc4>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e001      	b.n	8005a9a <xTaskRemoveFromEventList+0xa6>
    }
    else
    {
        xReturn = pdFALSE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005a9a:	697b      	ldr	r3, [r7, #20]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000198 	.word	0x20000198
 8005aa8:	20000178 	.word	0x20000178
 8005aac:	2000009c 	.word	0x2000009c
 8005ab0:	20000130 	.word	0x20000130
 8005ab4:	20000098 	.word	0x20000098
 8005ab8:	20000184 	.word	0x20000184

08005abc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <vTaskInternalSetTimeOutState+0x24>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <vTaskInternalSetTimeOutState+0x28>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	605a      	str	r2, [r3, #4]
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20000188 	.word	0x20000188
 8005ae4:	20000174 	.word	0x20000174

08005ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10b      	bne.n	8005b10 <xTaskCheckForTimeOut+0x28>
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	b672      	cpsid	i
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	b662      	cpsie	i
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	e7fe      	b.n	8005b0e <xTaskCheckForTimeOut+0x26>
    configASSERT( pxTicksToWait );
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <xTaskCheckForTimeOut+0x46>
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	b672      	cpsid	i
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	b662      	cpsie	i
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e7fe      	b.n	8005b2c <xTaskCheckForTimeOut+0x44>

    taskENTER_CRITICAL();
 8005b2e:	f000 fdf5 	bl	800671c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005b32:	4b1f      	ldr	r3, [pc, #124]	; (8005bb0 <xTaskCheckForTimeOut+0xc8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d102      	bne.n	8005b52 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	e026      	b.n	8005ba0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <xTaskCheckForTimeOut+0xcc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d00a      	beq.n	8005b74 <xTaskCheckForTimeOut+0x8c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d305      	bcc.n	8005b74 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e015      	b.n	8005ba0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d20b      	bcs.n	8005b96 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	1ad2      	subs	r2, r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ff96 	bl	8005abc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	e004      	b.n	8005ba0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005ba0:	f000 fdee 	bl	8006780 <vPortExitCritical>

    return xReturn;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000174 	.word	0x20000174
 8005bb4:	20000188 	.word	0x20000188

08005bb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005bbc:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <vTaskMissedYield+0x14>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000184 	.word	0x20000184

08005bd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005bd8:	f000 f842 	bl	8005c60 <prvCheckTasksWaitingTermination>
 8005bdc:	e7fc      	b.n	8005bd8 <prvIdleTask+0x8>
	...

08005be0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005be6:	2300      	movs	r3, #0
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	e00c      	b.n	8005c06 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <prvInitialiseTaskLists+0x60>)
 8005bf8:	4413      	add	r3, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe fd73 	bl	80046e6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3301      	adds	r3, #1
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d9ef      	bls.n	8005bec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005c0c:	480d      	ldr	r0, [pc, #52]	; (8005c44 <prvInitialiseTaskLists+0x64>)
 8005c0e:	f7fe fd6a 	bl	80046e6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005c12:	480d      	ldr	r0, [pc, #52]	; (8005c48 <prvInitialiseTaskLists+0x68>)
 8005c14:	f7fe fd67 	bl	80046e6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005c18:	480c      	ldr	r0, [pc, #48]	; (8005c4c <prvInitialiseTaskLists+0x6c>)
 8005c1a:	f7fe fd64 	bl	80046e6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005c1e:	480c      	ldr	r0, [pc, #48]	; (8005c50 <prvInitialiseTaskLists+0x70>)
 8005c20:	f7fe fd61 	bl	80046e6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005c24:	480b      	ldr	r0, [pc, #44]	; (8005c54 <prvInitialiseTaskLists+0x74>)
 8005c26:	f7fe fd5e 	bl	80046e6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <prvInitialiseTaskLists+0x78>)
 8005c2c:	4a05      	ldr	r2, [pc, #20]	; (8005c44 <prvInitialiseTaskLists+0x64>)
 8005c2e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <prvInitialiseTaskLists+0x7c>)
 8005c32:	4a05      	ldr	r2, [pc, #20]	; (8005c48 <prvInitialiseTaskLists+0x68>)
 8005c34:	601a      	str	r2, [r3, #0]
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	2000009c 	.word	0x2000009c
 8005c44:	20000100 	.word	0x20000100
 8005c48:	20000114 	.word	0x20000114
 8005c4c:	20000130 	.word	0x20000130
 8005c50:	20000144 	.word	0x20000144
 8005c54:	2000015c 	.word	0x2000015c
 8005c58:	20000128 	.word	0x20000128
 8005c5c:	2000012c 	.word	0x2000012c

08005c60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c66:	e019      	b.n	8005c9c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005c68:	f000 fd58 	bl	800671c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <prvCheckTasksWaitingTermination+0x4c>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe fdbe 	bl	80047fa <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <prvCheckTasksWaitingTermination+0x50>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	4a0a      	ldr	r2, [pc, #40]	; (8005cb0 <prvCheckTasksWaitingTermination+0x50>)
 8005c86:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <prvCheckTasksWaitingTermination+0x54>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <prvCheckTasksWaitingTermination+0x54>)
 8005c90:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005c92:	f000 fd75 	bl	8006780 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f80e 	bl	8005cb8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <prvCheckTasksWaitingTermination+0x54>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e1      	bne.n	8005c68 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20000144 	.word	0x20000144
 8005cb0:	20000170 	.word	0x20000170
 8005cb4:	20000158 	.word	0x20000158

08005cb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 ff35 	bl	8006b34 <vPortFree>
                vPortFree( pxTCB );
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 ff32 	bl	8006b34 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <prvResetNextTaskUnblockTime+0x30>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d104      	bne.n	8005cf0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005ce6:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <prvResetNextTaskUnblockTime+0x34>)
 8005ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005cee:	e005      	b.n	8005cfc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <prvResetNextTaskUnblockTime+0x30>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a04      	ldr	r2, [pc, #16]	; (8005d0c <prvResetNextTaskUnblockTime+0x34>)
 8005cfa:	6013      	str	r3, [r2, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000128 	.word	0x20000128
 8005d0c:	20000190 	.word	0x20000190

08005d10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005d16:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <xTaskGetSchedulerState+0x34>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	607b      	str	r3, [r7, #4]
 8005d22:	e008      	b.n	8005d36 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d24:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <xTaskGetSchedulerState+0x38>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	607b      	str	r3, [r7, #4]
 8005d30:	e001      	b.n	8005d36 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005d32:	2300      	movs	r3, #0
 8005d34:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005d36:	687b      	ldr	r3, [r7, #4]
    }
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	2000017c 	.word	0x2000017c
 8005d48:	20000198 	.word	0x20000198

08005d4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d058      	beq.n	8005e14 <xTaskPriorityDisinherit+0xc8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005d62:	4b2f      	ldr	r3, [pc, #188]	; (8005e20 <xTaskPriorityDisinherit+0xd4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d00b      	beq.n	8005d84 <xTaskPriorityDisinherit+0x38>
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	b672      	cpsid	i
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	b662      	cpsie	i
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e7fe      	b.n	8005d82 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <xTaskPriorityDisinherit+0x58>
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	b672      	cpsid	i
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	b662      	cpsie	i
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	e7fe      	b.n	8005da2 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da8:	1e5a      	subs	r2, r3, #1
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d02c      	beq.n	8005e14 <xTaskPriorityDisinherit+0xc8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d128      	bne.n	8005e14 <xTaskPriorityDisinherit+0xc8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fd17 	bl	80047fa <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	f1c3 0205 	rsb	r2, r3, #5
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <xTaskPriorityDisinherit+0xd8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d903      	bls.n	8005df4 <xTaskPriorityDisinherit+0xa8>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4a0c      	ldr	r2, [pc, #48]	; (8005e24 <xTaskPriorityDisinherit+0xd8>)
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <xTaskPriorityDisinherit+0xdc>)
 8005e02:	441a      	add	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7fe fc98 	bl	8004740 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005e14:	697b      	ldr	r3, [r7, #20]
    }
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000098 	.word	0x20000098
 8005e24:	20000178 	.word	0x20000178
 8005e28:	2000009c 	.word	0x2000009c

08005e2c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005e36:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <prvAddCurrentTaskToDelayedList+0x90>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e3c:	4b20      	ldr	r3, [pc, #128]	; (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fcd9 	bl	80047fa <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d10a      	bne.n	8005e66 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4819      	ldr	r0, [pc, #100]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e60:	f7fe fc6e 	bl	8004740 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005e64:	e026      	b.n	8005eb4 <prvAddCurrentTaskToDelayedList+0x88>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e6e:	4b14      	ldr	r3, [pc, #80]	; (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d209      	bcs.n	8005e92 <prvAddCurrentTaskToDelayedList+0x66>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e7e:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7fe fc7c 	bl	8004788 <vListInsert>
}
 8005e90:	e010      	b.n	8005eb4 <prvAddCurrentTaskToDelayedList+0x88>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e92:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe fc72 	bl	8004788 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d202      	bcs.n	8005eb4 <prvAddCurrentTaskToDelayedList+0x88>
                        xNextTaskUnblockTime = xTimeToWake;
 8005eae:	4a08      	ldr	r2, [pc, #32]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	6013      	str	r3, [r2, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000174 	.word	0x20000174
 8005ec0:	20000098 	.word	0x20000098
 8005ec4:	2000015c 	.word	0x2000015c
 8005ec8:	2000012c 	.word	0x2000012c
 8005ecc:	20000128 	.word	0x20000128
 8005ed0:	20000190 	.word	0x20000190

08005ed4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005ede:	f000 fadb 	bl	8006498 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005ee2:	4b11      	ldr	r3, [pc, #68]	; (8005f28 <xTimerCreateTimerTask+0x54>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005eea:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <xTimerCreateTimerTask+0x58>)
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	2303      	movs	r3, #3
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2280      	movs	r2, #128	; 0x80
 8005ef6:	490e      	ldr	r1, [pc, #56]	; (8005f30 <xTimerCreateTimerTask+0x5c>)
 8005ef8:	480e      	ldr	r0, [pc, #56]	; (8005f34 <xTimerCreateTimerTask+0x60>)
 8005efa:	f7ff f995 	bl	8005228 <xTaskCreate>
 8005efe:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10b      	bne.n	8005f1e <xTimerCreateTimerTask+0x4a>
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	b672      	cpsid	i
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	b662      	cpsie	i
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	e7fe      	b.n	8005f1c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005f1e:	687b      	ldr	r3, [r7, #4]
    }
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200001cc 	.word	0x200001cc
 8005f2c:	200001d0 	.word	0x200001d0
 8005f30:	08007744 	.word	0x08007744
 8005f34:	08006071 	.word	0x08006071

08005f38 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08a      	sub	sp, #40	; 0x28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <xTimerGenericCommand+0x30>
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	b672      	cpsid	i
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	b662      	cpsie	i
 8005f64:	623b      	str	r3, [r7, #32]
 8005f66:	e7fe      	b.n	8005f66 <xTimerGenericCommand+0x2e>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005f68:	4b19      	ldr	r3, [pc, #100]	; (8005fd0 <xTimerGenericCommand+0x98>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d02a      	beq.n	8005fc6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	dc18      	bgt.n	8005fb4 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f82:	f7ff fec5 	bl	8005d10 <xTaskGetSchedulerState>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d109      	bne.n	8005fa0 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <xTimerGenericCommand+0x98>)
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	f107 0114 	add.w	r1, r7, #20
 8005f94:	2300      	movs	r3, #0
 8005f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f98:	f7fe fd46 	bl	8004a28 <xQueueGenericSend>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24
 8005f9e:	e012      	b.n	8005fc6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <xTimerGenericCommand+0x98>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	f107 0114 	add.w	r1, r7, #20
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2200      	movs	r2, #0
 8005fac:	f7fe fd3c 	bl	8004a28 <xQueueGenericSend>
 8005fb0:	6278      	str	r0, [r7, #36]	; 0x24
 8005fb2:	e008      	b.n	8005fc6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <xTimerGenericCommand+0x98>)
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	f107 0114 	add.w	r1, r7, #20
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	f7fe fe34 	bl	8004c2c <xQueueGenericSendFromISR>
 8005fc4:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3728      	adds	r7, #40	; 0x28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	200001cc 	.word	0x200001cc

08005fd4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fde:	4b23      	ldr	r3, [pc, #140]	; (800606c <prvProcessExpiredTimer+0x98>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe fc04 	bl	80047fa <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d023      	beq.n	8006048 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	699a      	ldr	r2, [r3, #24]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	18d1      	adds	r1, r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	6978      	ldr	r0, [r7, #20]
 800600e:	f000 f8d3 	bl	80061b8 <prvInsertTimerInActiveList>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d020      	beq.n	800605a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006018:	2300      	movs	r3, #0
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	2300      	movs	r3, #0
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	2100      	movs	r1, #0
 8006022:	6978      	ldr	r0, [r7, #20]
 8006024:	f7ff ff88 	bl	8005f38 <xTimerGenericCommand>
 8006028:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d114      	bne.n	800605a <prvProcessExpiredTimer+0x86>
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	b672      	cpsid	i
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	b662      	cpsie	i
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	e7fe      	b.n	8006046 <prvProcessExpiredTimer+0x72>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	4798      	blx	r3
    }
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	200001c4 	.word	0x200001c4

08006070 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	4618      	mov	r0, r3
 800607e:	f000 f857 	bl	8006130 <prvGetNextExpireTime>
 8006082:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4619      	mov	r1, r3
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f803 	bl	8006094 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800608e:	f000 f8d5 	bl	800623c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006092:	e7f1      	b.n	8006078 <prvTimerTask+0x8>

08006094 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800609e:	f7ff fa91 	bl	80055c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060a2:	f107 0308 	add.w	r3, r7, #8
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f866 	bl	8006178 <prvSampleTimeNow>
 80060ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d130      	bne.n	8006116 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <prvProcessTimerOrBlockTask+0x3c>
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d806      	bhi.n	80060d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80060c2:	f7ff fa8d 	bl	80055e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060c6:	68f9      	ldr	r1, [r7, #12]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ff83 	bl	8005fd4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80060ce:	e024      	b.n	800611a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d008      	beq.n	80060e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <prvProcessTimerOrBlockTask+0x90>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <prvProcessTimerOrBlockTask+0x50>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <prvProcessTimerOrBlockTask+0x52>
 80060e4:	2300      	movs	r3, #0
 80060e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <prvProcessTimerOrBlockTask+0x94>)
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	4619      	mov	r1, r3
 80060f6:	f7ff f863 	bl	80051c0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80060fa:	f7ff fa71 	bl	80055e0 <xTaskResumeAll>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <prvProcessTimerOrBlockTask+0x98>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
    }
 8006114:	e001      	b.n	800611a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006116:	f7ff fa63 	bl	80055e0 <xTaskResumeAll>
    }
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200001c8 	.word	0x200001c8
 8006128:	200001cc 	.word	0x200001cc
 800612c:	e000ed04 	.word	0xe000ed04

08006130 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006138:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <prvGetNextExpireTime+0x44>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <prvGetNextExpireTime+0x16>
 8006142:	2201      	movs	r2, #1
 8006144:	e000      	b.n	8006148 <prvGetNextExpireTime+0x18>
 8006146:	2200      	movs	r2, #0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d105      	bne.n	8006160 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <prvGetNextExpireTime+0x44>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e001      	b.n	8006164 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006164:	68fb      	ldr	r3, [r7, #12]
    }
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	200001c4 	.word	0x200001c4

08006178 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006180:	f7ff facc 	bl	800571c <xTaskGetTickCount>
 8006184:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <prvSampleTimeNow+0x3c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	429a      	cmp	r2, r3
 800618e:	d205      	bcs.n	800619c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006190:	f000 f91c 	bl	80063cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	e002      	b.n	80061a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80061a2:	4a04      	ldr	r2, [pc, #16]	; (80061b4 <prvSampleTimeNow+0x3c>)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80061a8:	68fb      	ldr	r3, [r7, #12]
    }
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200001d4 	.word	0x200001d4

080061b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d812      	bhi.n	8006204 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d302      	bcc.n	80061f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80061ec:	2301      	movs	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	e01b      	b.n	800622a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061f2:	4b10      	ldr	r3, [pc, #64]	; (8006234 <prvInsertTimerInActiveList+0x7c>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fe fac3 	bl	8004788 <vListInsert>
 8006202:	e012      	b.n	800622a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d206      	bcs.n	800621a <prvInsertTimerInActiveList+0x62>
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	e007      	b.n	800622a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800621a:	4b07      	ldr	r3, [pc, #28]	; (8006238 <prvInsertTimerInActiveList+0x80>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3304      	adds	r3, #4
 8006222:	4619      	mov	r1, r3
 8006224:	4610      	mov	r0, r2
 8006226:	f7fe faaf 	bl	8004788 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800622a:	697b      	ldr	r3, [r7, #20]
    }
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	200001c8 	.word	0x200001c8
 8006238:	200001c4 	.word	0x200001c4

0800623c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	; 0x30
 8006240:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006242:	e0b0      	b.n	80063a6 <prvProcessReceivedCommands+0x16a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f2c0 80ac 	blt.w	80063a4 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	3304      	adds	r3, #4
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe facc 	bl	80047fa <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006262:	1d3b      	adds	r3, r7, #4
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff ff87 	bl	8006178 <prvSampleTimeNow>
 800626a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b09      	cmp	r3, #9
 8006270:	f200 8099 	bhi.w	80063a6 <prvProcessReceivedCommands+0x16a>
 8006274:	a201      	add	r2, pc, #4	; (adr r2, 800627c <prvProcessReceivedCommands+0x40>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062a5 	.word	0x080062a5
 8006288:	0800631b 	.word	0x0800631b
 800628c:	0800632f 	.word	0x0800632f
 8006290:	0800637b 	.word	0x0800637b
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062a5 	.word	0x080062a5
 800629c:	0800631b 	.word	0x0800631b
 80062a0:	0800632f 	.word	0x0800632f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	18d1      	adds	r1, r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a3a      	ldr	r2, [r7, #32]
 80062c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062c4:	f7ff ff78 	bl	80061b8 <prvInsertTimerInActiveList>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d06b      	beq.n	80063a6 <prvProcessReceivedCommands+0x16a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062d4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d060      	beq.n	80063a6 <prvProcessReceivedCommands+0x16a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	441a      	add	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	2100      	movs	r1, #0
 80062f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062f6:	f7ff fe1f 	bl	8005f38 <xTimerGenericCommand>
 80062fa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d151      	bne.n	80063a6 <prvProcessReceivedCommands+0x16a>
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	b672      	cpsid	i
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	b662      	cpsie	i
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	e7fe      	b.n	8006318 <prvProcessReceivedCommands+0xdc>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 800632c:	e03b      	b.n	80063a6 <prvProcessReceivedCommands+0x16a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	b2da      	uxtb	r2, r3
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <prvProcessReceivedCommands+0x12a>
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	b672      	cpsid	i
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	b662      	cpsie	i
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	e7fe      	b.n	8006364 <prvProcessReceivedCommands+0x128>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	18d1      	adds	r1, r2, r3
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006374:	f7ff ff20 	bl	80061b8 <prvInsertTimerInActiveList>
                        break;
 8006378:	e015      	b.n	80063a6 <prvProcessReceivedCommands+0x16a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d103      	bne.n	8006390 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8006388:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800638a:	f000 fbd3 	bl	8006b34 <vPortFree>
 800638e:	e00a      	b.n	80063a6 <prvProcessReceivedCommands+0x16a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80063a2:	e000      	b.n	80063a6 <prvProcessReceivedCommands+0x16a>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80063a4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <prvProcessReceivedCommands+0x18c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f107 0108 	add.w	r1, r7, #8
 80063ae:	2200      	movs	r2, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fe fceb 	bl	8004d8c <xQueueReceive>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f47f af43 	bne.w	8006244 <prvProcessReceivedCommands+0x8>
        }
    }
 80063be:	bf00      	nop
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200001cc 	.word	0x200001cc

080063cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063d2:	e049      	b.n	8006468 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063d4:	4b2e      	ldr	r3, [pc, #184]	; (8006490 <prvSwitchTimerLists+0xc4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063de:	4b2c      	ldr	r3, [pc, #176]	; (8006490 <prvSwitchTimerLists+0xc4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe fa04 	bl	80047fa <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02f      	beq.n	8006468 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4413      	add	r3, r2
 8006410:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	429a      	cmp	r2, r3
 8006418:	d90e      	bls.n	8006438 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006426:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <prvSwitchTimerLists+0xc4>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3304      	adds	r3, #4
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f7fe f9a9 	bl	8004788 <vListInsert>
 8006436:	e017      	b.n	8006468 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006438:	2300      	movs	r3, #0
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2300      	movs	r3, #0
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	2100      	movs	r1, #0
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fd78 	bl	8005f38 <xTimerGenericCommand>
 8006448:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10b      	bne.n	8006468 <prvSwitchTimerLists+0x9c>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	b672      	cpsid	i
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	b662      	cpsie	i
 8006464:	603b      	str	r3, [r7, #0]
 8006466:	e7fe      	b.n	8006466 <prvSwitchTimerLists+0x9a>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006468:	4b09      	ldr	r3, [pc, #36]	; (8006490 <prvSwitchTimerLists+0xc4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1b0      	bne.n	80063d4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <prvSwitchTimerLists+0xc4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <prvSwitchTimerLists+0xc8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a04      	ldr	r2, [pc, #16]	; (8006490 <prvSwitchTimerLists+0xc4>)
 800647e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006480:	4a04      	ldr	r2, [pc, #16]	; (8006494 <prvSwitchTimerLists+0xc8>)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	6013      	str	r3, [r2, #0]
    }
 8006486:	bf00      	nop
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200001c4 	.word	0x200001c4
 8006494:	200001c8 	.word	0x200001c8

08006498 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800649c:	f000 f93e 	bl	800671c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80064a0:	4b12      	ldr	r3, [pc, #72]	; (80064ec <prvCheckForValidListAndQueue+0x54>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11d      	bne.n	80064e4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80064a8:	4811      	ldr	r0, [pc, #68]	; (80064f0 <prvCheckForValidListAndQueue+0x58>)
 80064aa:	f7fe f91c 	bl	80046e6 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80064ae:	4811      	ldr	r0, [pc, #68]	; (80064f4 <prvCheckForValidListAndQueue+0x5c>)
 80064b0:	f7fe f919 	bl	80046e6 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <prvCheckForValidListAndQueue+0x60>)
 80064b6:	4a0e      	ldr	r2, [pc, #56]	; (80064f0 <prvCheckForValidListAndQueue+0x58>)
 80064b8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <prvCheckForValidListAndQueue+0x64>)
 80064bc:	4a0d      	ldr	r2, [pc, #52]	; (80064f4 <prvCheckForValidListAndQueue+0x5c>)
 80064be:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80064c0:	2200      	movs	r2, #0
 80064c2:	210c      	movs	r1, #12
 80064c4:	200a      	movs	r0, #10
 80064c6:	f7fe fa2d 	bl	8004924 <xQueueGenericCreate>
 80064ca:	4602      	mov	r2, r0
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <prvCheckForValidListAndQueue+0x54>)
 80064ce:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80064d0:	4b06      	ldr	r3, [pc, #24]	; (80064ec <prvCheckForValidListAndQueue+0x54>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064d8:	4b04      	ldr	r3, [pc, #16]	; (80064ec <prvCheckForValidListAndQueue+0x54>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4908      	ldr	r1, [pc, #32]	; (8006500 <prvCheckForValidListAndQueue+0x68>)
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fe46 	bl	8005170 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80064e4:	f000 f94c 	bl	8006780 <vPortExitCritical>
    }
 80064e8:	bf00      	nop
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	200001cc 	.word	0x200001cc
 80064f0:	2000019c 	.word	0x2000019c
 80064f4:	200001b0 	.word	0x200001b0
 80064f8:	200001c4 	.word	0x200001c4
 80064fc:	200001c8 	.word	0x200001c8
 8006500:	0800774c 	.word	0x0800774c

08006504 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3b04      	subs	r3, #4
 8006514:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800651c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3b04      	subs	r3, #4
 8006522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f023 0201 	bic.w	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3b04      	subs	r3, #4
 8006532:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006534:	4a0c      	ldr	r2, [pc, #48]	; (8006568 <pxPortInitialiseStack+0x64>)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3b14      	subs	r3, #20
 800653e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b04      	subs	r3, #4
 800654a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f06f 0202 	mvn.w	r2, #2
 8006552:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3b20      	subs	r3, #32
 8006558:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	0800656d 	.word	0x0800656d

0800656c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <prvTaskExitError+0x58>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d00b      	beq.n	8006598 <prvTaskExitError+0x2c>
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	b672      	cpsid	i
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	b662      	cpsie	i
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	e7fe      	b.n	8006596 <prvTaskExitError+0x2a>
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	b672      	cpsid	i
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	b662      	cpsie	i
 80065ac:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80065ae:	bf00      	nop
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0fc      	beq.n	80065b0 <prvTaskExitError+0x44>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80065b6:	bf00      	nop
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000010 	.word	0x20000010
	...

080065d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80065d0:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <pxCurrentTCBConst2>)
 80065d2:	6819      	ldr	r1, [r3, #0]
 80065d4:	6808      	ldr	r0, [r1, #0]
 80065d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065da:	f380 8809 	msr	PSP, r0
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f04f 0000 	mov.w	r0, #0
 80065e6:	f380 8811 	msr	BASEPRI, r0
 80065ea:	4770      	bx	lr
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst2>:
 80065f0:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80065f8:	4808      	ldr	r0, [pc, #32]	; (800661c <prvPortStartFirstTask+0x24>)
 80065fa:	6800      	ldr	r0, [r0, #0]
 80065fc:	6800      	ldr	r0, [r0, #0]
 80065fe:	f380 8808 	msr	MSP, r0
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8814 	msr	CONTROL, r0
 800660a:	b662      	cpsie	i
 800660c:	b661      	cpsie	f
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	df00      	svc	0
 8006618:	bf00      	nop
 800661a:	0000      	.short	0x0000
 800661c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop

08006624 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800662a:	4b36      	ldr	r3, [pc, #216]	; (8006704 <xPortStartScheduler+0xe0>)
 800662c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	22ff      	movs	r2, #255	; 0xff
 800663a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4b2e      	ldr	r3, [pc, #184]	; (8006708 <xPortStartScheduler+0xe4>)
 8006650:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006652:	4b2e      	ldr	r3, [pc, #184]	; (800670c <xPortStartScheduler+0xe8>)
 8006654:	2207      	movs	r2, #7
 8006656:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006658:	e009      	b.n	800666e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800665a:	4b2c      	ldr	r3, [pc, #176]	; (800670c <xPortStartScheduler+0xe8>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3b01      	subs	r3, #1
 8006660:	4a2a      	ldr	r2, [pc, #168]	; (800670c <xPortStartScheduler+0xe8>)
 8006662:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006676:	2b80      	cmp	r3, #128	; 0x80
 8006678:	d0ef      	beq.n	800665a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800667a:	4b24      	ldr	r3, [pc, #144]	; (800670c <xPortStartScheduler+0xe8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1c3 0307 	rsb	r3, r3, #7
 8006682:	2b04      	cmp	r3, #4
 8006684:	d00b      	beq.n	800669e <xPortStartScheduler+0x7a>
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	b672      	cpsid	i
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	b662      	cpsie	i
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	e7fe      	b.n	800669c <xPortStartScheduler+0x78>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800669e:	4b1b      	ldr	r3, [pc, #108]	; (800670c <xPortStartScheduler+0xe8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	4a19      	ldr	r2, [pc, #100]	; (800670c <xPortStartScheduler+0xe8>)
 80066a6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066a8:	4b18      	ldr	r3, [pc, #96]	; (800670c <xPortStartScheduler+0xe8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066b0:	4a16      	ldr	r2, [pc, #88]	; (800670c <xPortStartScheduler+0xe8>)
 80066b2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80066bc:	4b14      	ldr	r3, [pc, #80]	; (8006710 <xPortStartScheduler+0xec>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a13      	ldr	r2, [pc, #76]	; (8006710 <xPortStartScheduler+0xec>)
 80066c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066c6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80066c8:	4b11      	ldr	r3, [pc, #68]	; (8006710 <xPortStartScheduler+0xec>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a10      	ldr	r2, [pc, #64]	; (8006710 <xPortStartScheduler+0xec>)
 80066ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066d2:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80066d4:	f000 f8da 	bl	800688c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80066d8:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <xPortStartScheduler+0xf0>)
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80066de:	f000 f8f9 	bl	80068d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066e2:	4b0d      	ldr	r3, [pc, #52]	; (8006718 <xPortStartScheduler+0xf4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a0c      	ldr	r2, [pc, #48]	; (8006718 <xPortStartScheduler+0xf4>)
 80066e8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066ec:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80066ee:	f7ff ff83 	bl	80065f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80066f2:	f7ff f8cf 	bl	8005894 <vTaskSwitchContext>
    prvTaskExitError();
 80066f6:	f7ff ff39 	bl	800656c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000e400 	.word	0xe000e400
 8006708:	200001d8 	.word	0x200001d8
 800670c:	200001dc 	.word	0x200001dc
 8006710:	e000ed20 	.word	0xe000ed20
 8006714:	20000010 	.word	0x20000010
 8006718:	e000ef34 	.word	0xe000ef34

0800671c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	b672      	cpsid	i
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	b662      	cpsie	i
 8006736:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006738:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <vPortEnterCritical+0x5c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	4a0e      	ldr	r2, [pc, #56]	; (8006778 <vPortEnterCritical+0x5c>)
 8006740:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006742:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <vPortEnterCritical+0x5c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d110      	bne.n	800676c <vPortEnterCritical+0x50>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800674a:	4b0c      	ldr	r3, [pc, #48]	; (800677c <vPortEnterCritical+0x60>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <vPortEnterCritical+0x50>
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	b672      	cpsid	i
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	b662      	cpsie	i
 8006768:	603b      	str	r3, [r7, #0]
 800676a:	e7fe      	b.n	800676a <vPortEnterCritical+0x4e>
    }
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000010 	.word	0x20000010
 800677c:	e000ed04 	.word	0xe000ed04

08006780 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006786:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <vPortExitCritical+0x50>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10b      	bne.n	80067a6 <vPortExitCritical+0x26>
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	b672      	cpsid	i
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	b662      	cpsie	i
 80067a2:	607b      	str	r3, [r7, #4]
 80067a4:	e7fe      	b.n	80067a4 <vPortExitCritical+0x24>
    uxCriticalNesting--;
 80067a6:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <vPortExitCritical+0x50>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	4a08      	ldr	r2, [pc, #32]	; (80067d0 <vPortExitCritical+0x50>)
 80067ae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80067b0:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <vPortExitCritical+0x50>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <vPortExitCritical+0x42>
 80067b8:	2300      	movs	r3, #0
 80067ba:	603b      	str	r3, [r7, #0]
        __asm volatile
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20000010 	.word	0x20000010
	...

080067e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80067e0:	f3ef 8009 	mrs	r0, PSP
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4b15      	ldr	r3, [pc, #84]	; (8006840 <pxCurrentTCBConst>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	f01e 0f10 	tst.w	lr, #16
 80067f0:	bf08      	it	eq
 80067f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	6010      	str	r0, [r2, #0]
 80067fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006804:	b672      	cpsid	i
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	b662      	cpsie	i
 8006814:	f7ff f83e 	bl	8005894 <vTaskSwitchContext>
 8006818:	f04f 0000 	mov.w	r0, #0
 800681c:	f380 8811 	msr	BASEPRI, r0
 8006820:	bc09      	pop	{r0, r3}
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	f01e 0f10 	tst.w	lr, #16
 800682e:	bf08      	it	eq
 8006830:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006834:	f380 8809 	msr	PSP, r0
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop

08006840 <pxCurrentTCBConst>:
 8006840:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
        __asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	b672      	cpsid	i
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	b662      	cpsie	i
 8006862:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006864:	f7fe ff6a 	bl	800573c <xTaskIncrementTick>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <xPortSysTickHandler+0x2e>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800686e:	4b06      	ldr	r3, [pc, #24]	; (8006888 <xPortSysTickHandler+0x40>)
 8006870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	2300      	movs	r3, #0
 8006878:	603b      	str	r3, [r7, #0]
        __asm volatile
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <vPortSetupTimerInterrupt+0x34>)
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006896:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <vPortSetupTimerInterrupt+0x38>)
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800689c:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <vPortSetupTimerInterrupt+0x3c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <vPortSetupTimerInterrupt+0x40>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	099b      	lsrs	r3, r3, #6
 80068a8:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <vPortSetupTimerInterrupt+0x44>)
 80068aa:	3b01      	subs	r3, #1
 80068ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ae:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <vPortSetupTimerInterrupt+0x34>)
 80068b0:	2207      	movs	r2, #7
 80068b2:	601a      	str	r2, [r3, #0]
}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	e000e010 	.word	0xe000e010
 80068c4:	e000e018 	.word	0xe000e018
 80068c8:	20000000 	.word	0x20000000
 80068cc:	10624dd3 	.word	0x10624dd3
 80068d0:	e000e014 	.word	0xe000e014

080068d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80068d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80068e4 <vPortEnableVFP+0x10>
 80068d8:	6801      	ldr	r1, [r0, #0]
 80068da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068de:	6001      	str	r1, [r0, #0]
 80068e0:	4770      	bx	lr
 80068e2:	0000      	.short	0x0000
 80068e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop

080068ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80068f2:	f3ef 8305 	mrs	r3, IPSR
 80068f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b0f      	cmp	r3, #15
 80068fc:	d915      	bls.n	800692a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068fe:	4a18      	ldr	r2, [pc, #96]	; (8006960 <vPortValidateInterruptPriority+0x74>)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006908:	4b16      	ldr	r3, [pc, #88]	; (8006964 <vPortValidateInterruptPriority+0x78>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	7afa      	ldrb	r2, [r7, #11]
 800690e:	429a      	cmp	r2, r3
 8006910:	d20b      	bcs.n	800692a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	b672      	cpsid	i
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	b662      	cpsie	i
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	e7fe      	b.n	8006928 <vPortValidateInterruptPriority+0x3c>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <vPortValidateInterruptPriority+0x7c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006932:	4b0e      	ldr	r3, [pc, #56]	; (800696c <vPortValidateInterruptPriority+0x80>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d90b      	bls.n	8006952 <vPortValidateInterruptPriority+0x66>
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	b672      	cpsid	i
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	b662      	cpsie	i
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	e7fe      	b.n	8006950 <vPortValidateInterruptPriority+0x64>
    }
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	e000e3f0 	.word	0xe000e3f0
 8006964:	200001d8 	.word	0x200001d8
 8006968:	e000ed0c 	.word	0xe000ed0c
 800696c:	200001dc 	.word	0x200001dc

08006970 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800697c:	f7fe fe22 	bl	80055c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006980:	4b66      	ldr	r3, [pc, #408]	; (8006b1c <pvPortMalloc+0x1ac>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006988:	f000 f938 	bl	8006bfc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800698c:	4b64      	ldr	r3, [pc, #400]	; (8006b20 <pvPortMalloc+0x1b0>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4013      	ands	r3, r2
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 80a9 	bne.w	8006aec <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d02e      	beq.n	80069fe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80069a0:	2208      	movs	r2, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d228      	bcs.n	80069fe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80069ac:	2208      	movs	r2, #8
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d022      	beq.n	8006a04 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f023 0307 	bic.w	r3, r3, #7
 80069c4:	3308      	adds	r3, #8
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d215      	bcs.n	80069f8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f023 0307 	bic.w	r3, r3, #7
 80069d2:	3308      	adds	r3, #8
 80069d4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d011      	beq.n	8006a04 <pvPortMalloc+0x94>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	b672      	cpsid	i
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	b662      	cpsie	i
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	e7fe      	b.n	80069f6 <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069fc:	e002      	b.n	8006a04 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	e000      	b.n	8006a06 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a04:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d06f      	beq.n	8006aec <pvPortMalloc+0x17c>
 8006a0c:	4b45      	ldr	r3, [pc, #276]	; (8006b24 <pvPortMalloc+0x1b4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d86a      	bhi.n	8006aec <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006a16:	4b44      	ldr	r3, [pc, #272]	; (8006b28 <pvPortMalloc+0x1b8>)
 8006a18:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006a1a:	4b43      	ldr	r3, [pc, #268]	; (8006b28 <pvPortMalloc+0x1b8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a20:	e004      	b.n	8006a2c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d903      	bls.n	8006a3e <pvPortMalloc+0xce>
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f1      	bne.n	8006a22 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006a3e:	4b37      	ldr	r3, [pc, #220]	; (8006b1c <pvPortMalloc+0x1ac>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d051      	beq.n	8006aec <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	4413      	add	r3, r2
 8006a50:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	1ad2      	subs	r2, r2, r3
 8006a62:	2308      	movs	r3, #8
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d920      	bls.n	8006aac <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4413      	add	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <pvPortMalloc+0x124>
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	b672      	cpsid	i
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	b662      	cpsie	i
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	e7fe      	b.n	8006a92 <pvPortMalloc+0x122>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	1ad2      	subs	r2, r2, r3
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aa6:	69b8      	ldr	r0, [r7, #24]
 8006aa8:	f000 f90a 	bl	8006cc0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aac:	4b1d      	ldr	r3, [pc, #116]	; (8006b24 <pvPortMalloc+0x1b4>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <pvPortMalloc+0x1b4>)
 8006ab8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aba:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <pvPortMalloc+0x1b4>)
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <pvPortMalloc+0x1bc>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d203      	bcs.n	8006ace <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <pvPortMalloc+0x1b4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <pvPortMalloc+0x1bc>)
 8006acc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <pvPortMalloc+0x1b0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006ae2:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <pvPortMalloc+0x1c0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	4a11      	ldr	r2, [pc, #68]	; (8006b30 <pvPortMalloc+0x1c0>)
 8006aea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006aec:	f7fe fd78 	bl	80055e0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00b      	beq.n	8006b12 <pvPortMalloc+0x1a2>
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	b672      	cpsid	i
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	b662      	cpsie	i
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	e7fe      	b.n	8006b10 <pvPortMalloc+0x1a0>
    return pvReturn;
 8006b12:	69fb      	ldr	r3, [r7, #28]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3728      	adds	r7, #40	; 0x28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	200201e8 	.word	0x200201e8
 8006b20:	200201fc 	.word	0x200201fc
 8006b24:	200201ec 	.word	0x200201ec
 8006b28:	200201e0 	.word	0x200201e0
 8006b2c:	200201f0 	.word	0x200201f0
 8006b30:	200201f4 	.word	0x200201f4

08006b34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d04f      	beq.n	8006be6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006b46:	2308      	movs	r3, #8
 8006b48:	425b      	negs	r3, r3
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	4b25      	ldr	r3, [pc, #148]	; (8006bf0 <vPortFree+0xbc>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <vPortFree+0x46>
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	b672      	cpsid	i
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	b662      	cpsie	i
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e7fe      	b.n	8006b78 <vPortFree+0x44>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <vPortFree+0x66>
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	b672      	cpsid	i
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	b662      	cpsie	i
 8006b96:	60bb      	str	r3, [r7, #8]
 8006b98:	e7fe      	b.n	8006b98 <vPortFree+0x64>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	4b14      	ldr	r3, [pc, #80]	; (8006bf0 <vPortFree+0xbc>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01e      	beq.n	8006be6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11a      	bne.n	8006be6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	4b0e      	ldr	r3, [pc, #56]	; (8006bf0 <vPortFree+0xbc>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	401a      	ands	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006bc0:	f7fe fd00 	bl	80055c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <vPortFree+0xc0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4413      	add	r3, r2
 8006bce:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <vPortFree+0xc0>)
 8006bd0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bd2:	6938      	ldr	r0, [r7, #16]
 8006bd4:	f000 f874 	bl	8006cc0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006bd8:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <vPortFree+0xc4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	4a06      	ldr	r2, [pc, #24]	; (8006bf8 <vPortFree+0xc4>)
 8006be0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006be2:	f7fe fcfd 	bl	80055e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006be6:	bf00      	nop
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	200201fc 	.word	0x200201fc
 8006bf4:	200201ec 	.word	0x200201ec
 8006bf8:	200201f8 	.word	0x200201f8

08006bfc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c06:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006c08:	4b27      	ldr	r3, [pc, #156]	; (8006ca8 <prvHeapInit+0xac>)
 8006c0a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00c      	beq.n	8006c30 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3307      	adds	r3, #7
 8006c1a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0307 	bic.w	r3, r3, #7
 8006c22:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	4a1f      	ldr	r2, [pc, #124]	; (8006ca8 <prvHeapInit+0xac>)
 8006c2c:	4413      	add	r3, r2
 8006c2e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c34:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <prvHeapInit+0xb0>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006c3a:	4b1c      	ldr	r3, [pc, #112]	; (8006cac <prvHeapInit+0xb0>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	4413      	add	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006c48:	2208      	movs	r2, #8
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0307 	bic.w	r3, r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <prvHeapInit+0xb4>)
 8006c5c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006c5e:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <prvHeapInit+0xb4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006c66:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <prvHeapInit+0xb4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	1ad2      	subs	r2, r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <prvHeapInit+0xb4>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <prvHeapInit+0xb8>)
 8006c8a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <prvHeapInit+0xbc>)
 8006c92:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c94:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <prvHeapInit+0xc0>)
 8006c96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c9a:	601a      	str	r2, [r3, #0]
}
 8006c9c:	bf00      	nop
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	200001e0 	.word	0x200001e0
 8006cac:	200201e0 	.word	0x200201e0
 8006cb0:	200201e8 	.word	0x200201e8
 8006cb4:	200201f0 	.word	0x200201f0
 8006cb8:	200201ec 	.word	0x200201ec
 8006cbc:	200201fc 	.word	0x200201fc

08006cc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cc8:	4b28      	ldr	r3, [pc, #160]	; (8006d6c <prvInsertBlockIntoFreeList+0xac>)
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	e002      	b.n	8006cd4 <prvInsertBlockIntoFreeList+0x14>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d8f7      	bhi.n	8006cce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	4413      	add	r3, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d108      	bne.n	8006d02 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	441a      	add	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	441a      	add	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d118      	bne.n	8006d48 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <prvInsertBlockIntoFreeList+0xb0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d00d      	beq.n	8006d3e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	441a      	add	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	e008      	b.n	8006d50 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <prvInsertBlockIntoFreeList+0xb0>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e003      	b.n	8006d50 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d002      	beq.n	8006d5e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006d5e:	bf00      	nop
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	200201e0 	.word	0x200201e0
 8006d70:	200201e8 	.word	0x200201e8

08006d74 <__errno>:
 8006d74:	4b01      	ldr	r3, [pc, #4]	; (8006d7c <__errno+0x8>)
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	20000014 	.word	0x20000014

08006d80 <__libc_init_array>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	4e0d      	ldr	r6, [pc, #52]	; (8006db8 <__libc_init_array+0x38>)
 8006d84:	4c0d      	ldr	r4, [pc, #52]	; (8006dbc <__libc_init_array+0x3c>)
 8006d86:	1ba4      	subs	r4, r4, r6
 8006d88:	10a4      	asrs	r4, r4, #2
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	42a5      	cmp	r5, r4
 8006d8e:	d109      	bne.n	8006da4 <__libc_init_array+0x24>
 8006d90:	4e0b      	ldr	r6, [pc, #44]	; (8006dc0 <__libc_init_array+0x40>)
 8006d92:	4c0c      	ldr	r4, [pc, #48]	; (8006dc4 <__libc_init_array+0x44>)
 8006d94:	f000 fc94 	bl	80076c0 <_init>
 8006d98:	1ba4      	subs	r4, r4, r6
 8006d9a:	10a4      	asrs	r4, r4, #2
 8006d9c:	2500      	movs	r5, #0
 8006d9e:	42a5      	cmp	r5, r4
 8006da0:	d105      	bne.n	8006dae <__libc_init_array+0x2e>
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
 8006da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006da8:	4798      	blx	r3
 8006daa:	3501      	adds	r5, #1
 8006dac:	e7ee      	b.n	8006d8c <__libc_init_array+0xc>
 8006dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006db2:	4798      	blx	r3
 8006db4:	3501      	adds	r5, #1
 8006db6:	e7f2      	b.n	8006d9e <__libc_init_array+0x1e>
 8006db8:	080077d8 	.word	0x080077d8
 8006dbc:	080077d8 	.word	0x080077d8
 8006dc0:	080077d8 	.word	0x080077d8
 8006dc4:	080077dc 	.word	0x080077dc

08006dc8 <memcpy>:
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	1e43      	subs	r3, r0, #1
 8006dcc:	440a      	add	r2, r1
 8006dce:	4291      	cmp	r1, r2
 8006dd0:	d100      	bne.n	8006dd4 <memcpy+0xc>
 8006dd2:	bd10      	pop	{r4, pc}
 8006dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ddc:	e7f7      	b.n	8006dce <memcpy+0x6>

08006dde <memset>:
 8006dde:	4402      	add	r2, r0
 8006de0:	4603      	mov	r3, r0
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d100      	bne.n	8006de8 <memset+0xa>
 8006de6:	4770      	bx	lr
 8006de8:	f803 1b01 	strb.w	r1, [r3], #1
 8006dec:	e7f9      	b.n	8006de2 <memset+0x4>
	...

08006df0 <_puts_r>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	460e      	mov	r6, r1
 8006df4:	4605      	mov	r5, r0
 8006df6:	b118      	cbz	r0, 8006e00 <_puts_r+0x10>
 8006df8:	6983      	ldr	r3, [r0, #24]
 8006dfa:	b90b      	cbnz	r3, 8006e00 <_puts_r+0x10>
 8006dfc:	f000 fa0c 	bl	8007218 <__sinit>
 8006e00:	69ab      	ldr	r3, [r5, #24]
 8006e02:	68ac      	ldr	r4, [r5, #8]
 8006e04:	b913      	cbnz	r3, 8006e0c <_puts_r+0x1c>
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 fa06 	bl	8007218 <__sinit>
 8006e0c:	4b23      	ldr	r3, [pc, #140]	; (8006e9c <_puts_r+0xac>)
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	d117      	bne.n	8006e42 <_puts_r+0x52>
 8006e12:	686c      	ldr	r4, [r5, #4]
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	071b      	lsls	r3, r3, #28
 8006e18:	d51d      	bpl.n	8006e56 <_puts_r+0x66>
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	b1db      	cbz	r3, 8006e56 <_puts_r+0x66>
 8006e1e:	3e01      	subs	r6, #1
 8006e20:	68a3      	ldr	r3, [r4, #8]
 8006e22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e26:	3b01      	subs	r3, #1
 8006e28:	60a3      	str	r3, [r4, #8]
 8006e2a:	b9e9      	cbnz	r1, 8006e68 <_puts_r+0x78>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da2e      	bge.n	8006e8e <_puts_r+0x9e>
 8006e30:	4622      	mov	r2, r4
 8006e32:	210a      	movs	r1, #10
 8006e34:	4628      	mov	r0, r5
 8006e36:	f000 f83f 	bl	8006eb8 <__swbuf_r>
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d011      	beq.n	8006e62 <_puts_r+0x72>
 8006e3e:	200a      	movs	r0, #10
 8006e40:	e011      	b.n	8006e66 <_puts_r+0x76>
 8006e42:	4b17      	ldr	r3, [pc, #92]	; (8006ea0 <_puts_r+0xb0>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	d101      	bne.n	8006e4c <_puts_r+0x5c>
 8006e48:	68ac      	ldr	r4, [r5, #8]
 8006e4a:	e7e3      	b.n	8006e14 <_puts_r+0x24>
 8006e4c:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <_puts_r+0xb4>)
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	bf08      	it	eq
 8006e52:	68ec      	ldreq	r4, [r5, #12]
 8006e54:	e7de      	b.n	8006e14 <_puts_r+0x24>
 8006e56:	4621      	mov	r1, r4
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 f87f 	bl	8006f5c <__swsetup_r>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d0dd      	beq.n	8006e1e <_puts_r+0x2e>
 8006e62:	f04f 30ff 	mov.w	r0, #4294967295
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da04      	bge.n	8006e76 <_puts_r+0x86>
 8006e6c:	69a2      	ldr	r2, [r4, #24]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	dc06      	bgt.n	8006e80 <_puts_r+0x90>
 8006e72:	290a      	cmp	r1, #10
 8006e74:	d004      	beq.n	8006e80 <_puts_r+0x90>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	6022      	str	r2, [r4, #0]
 8006e7c:	7019      	strb	r1, [r3, #0]
 8006e7e:	e7cf      	b.n	8006e20 <_puts_r+0x30>
 8006e80:	4622      	mov	r2, r4
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 f818 	bl	8006eb8 <__swbuf_r>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d1c9      	bne.n	8006e20 <_puts_r+0x30>
 8006e8c:	e7e9      	b.n	8006e62 <_puts_r+0x72>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	200a      	movs	r0, #10
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	6022      	str	r2, [r4, #0]
 8006e96:	7018      	strb	r0, [r3, #0]
 8006e98:	e7e5      	b.n	8006e66 <_puts_r+0x76>
 8006e9a:	bf00      	nop
 8006e9c:	08007790 	.word	0x08007790
 8006ea0:	080077b0 	.word	0x080077b0
 8006ea4:	08007770 	.word	0x08007770

08006ea8 <puts>:
 8006ea8:	4b02      	ldr	r3, [pc, #8]	; (8006eb4 <puts+0xc>)
 8006eaa:	4601      	mov	r1, r0
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	f7ff bf9f 	b.w	8006df0 <_puts_r>
 8006eb2:	bf00      	nop
 8006eb4:	20000014 	.word	0x20000014

08006eb8 <__swbuf_r>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	460e      	mov	r6, r1
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	b118      	cbz	r0, 8006eca <__swbuf_r+0x12>
 8006ec2:	6983      	ldr	r3, [r0, #24]
 8006ec4:	b90b      	cbnz	r3, 8006eca <__swbuf_r+0x12>
 8006ec6:	f000 f9a7 	bl	8007218 <__sinit>
 8006eca:	4b21      	ldr	r3, [pc, #132]	; (8006f50 <__swbuf_r+0x98>)
 8006ecc:	429c      	cmp	r4, r3
 8006ece:	d12a      	bne.n	8006f26 <__swbuf_r+0x6e>
 8006ed0:	686c      	ldr	r4, [r5, #4]
 8006ed2:	69a3      	ldr	r3, [r4, #24]
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	071a      	lsls	r2, r3, #28
 8006eda:	d52e      	bpl.n	8006f3a <__swbuf_r+0x82>
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	b363      	cbz	r3, 8006f3a <__swbuf_r+0x82>
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	6820      	ldr	r0, [r4, #0]
 8006ee4:	1ac0      	subs	r0, r0, r3
 8006ee6:	6963      	ldr	r3, [r4, #20]
 8006ee8:	b2f6      	uxtb	r6, r6
 8006eea:	4283      	cmp	r3, r0
 8006eec:	4637      	mov	r7, r6
 8006eee:	dc04      	bgt.n	8006efa <__swbuf_r+0x42>
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f926 	bl	8007144 <_fflush_r>
 8006ef8:	bb28      	cbnz	r0, 8006f46 <__swbuf_r+0x8e>
 8006efa:	68a3      	ldr	r3, [r4, #8]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	60a3      	str	r3, [r4, #8]
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	6022      	str	r2, [r4, #0]
 8006f06:	701e      	strb	r6, [r3, #0]
 8006f08:	6963      	ldr	r3, [r4, #20]
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	4283      	cmp	r3, r0
 8006f0e:	d004      	beq.n	8006f1a <__swbuf_r+0x62>
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	07db      	lsls	r3, r3, #31
 8006f14:	d519      	bpl.n	8006f4a <__swbuf_r+0x92>
 8006f16:	2e0a      	cmp	r6, #10
 8006f18:	d117      	bne.n	8006f4a <__swbuf_r+0x92>
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 f911 	bl	8007144 <_fflush_r>
 8006f22:	b190      	cbz	r0, 8006f4a <__swbuf_r+0x92>
 8006f24:	e00f      	b.n	8006f46 <__swbuf_r+0x8e>
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <__swbuf_r+0x9c>)
 8006f28:	429c      	cmp	r4, r3
 8006f2a:	d101      	bne.n	8006f30 <__swbuf_r+0x78>
 8006f2c:	68ac      	ldr	r4, [r5, #8]
 8006f2e:	e7d0      	b.n	8006ed2 <__swbuf_r+0x1a>
 8006f30:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <__swbuf_r+0xa0>)
 8006f32:	429c      	cmp	r4, r3
 8006f34:	bf08      	it	eq
 8006f36:	68ec      	ldreq	r4, [r5, #12]
 8006f38:	e7cb      	b.n	8006ed2 <__swbuf_r+0x1a>
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 f80d 	bl	8006f5c <__swsetup_r>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d0cc      	beq.n	8006ee0 <__swbuf_r+0x28>
 8006f46:	f04f 37ff 	mov.w	r7, #4294967295
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	08007790 	.word	0x08007790
 8006f54:	080077b0 	.word	0x080077b0
 8006f58:	08007770 	.word	0x08007770

08006f5c <__swsetup_r>:
 8006f5c:	4b32      	ldr	r3, [pc, #200]	; (8007028 <__swsetup_r+0xcc>)
 8006f5e:	b570      	push	{r4, r5, r6, lr}
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	4606      	mov	r6, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	b125      	cbz	r5, 8006f72 <__swsetup_r+0x16>
 8006f68:	69ab      	ldr	r3, [r5, #24]
 8006f6a:	b913      	cbnz	r3, 8006f72 <__swsetup_r+0x16>
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f000 f953 	bl	8007218 <__sinit>
 8006f72:	4b2e      	ldr	r3, [pc, #184]	; (800702c <__swsetup_r+0xd0>)
 8006f74:	429c      	cmp	r4, r3
 8006f76:	d10f      	bne.n	8006f98 <__swsetup_r+0x3c>
 8006f78:	686c      	ldr	r4, [r5, #4]
 8006f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	0715      	lsls	r5, r2, #28
 8006f82:	d42c      	bmi.n	8006fde <__swsetup_r+0x82>
 8006f84:	06d0      	lsls	r0, r2, #27
 8006f86:	d411      	bmi.n	8006fac <__swsetup_r+0x50>
 8006f88:	2209      	movs	r2, #9
 8006f8a:	6032      	str	r2, [r6, #0]
 8006f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	f04f 30ff 	mov.w	r0, #4294967295
 8006f96:	e03e      	b.n	8007016 <__swsetup_r+0xba>
 8006f98:	4b25      	ldr	r3, [pc, #148]	; (8007030 <__swsetup_r+0xd4>)
 8006f9a:	429c      	cmp	r4, r3
 8006f9c:	d101      	bne.n	8006fa2 <__swsetup_r+0x46>
 8006f9e:	68ac      	ldr	r4, [r5, #8]
 8006fa0:	e7eb      	b.n	8006f7a <__swsetup_r+0x1e>
 8006fa2:	4b24      	ldr	r3, [pc, #144]	; (8007034 <__swsetup_r+0xd8>)
 8006fa4:	429c      	cmp	r4, r3
 8006fa6:	bf08      	it	eq
 8006fa8:	68ec      	ldreq	r4, [r5, #12]
 8006faa:	e7e6      	b.n	8006f7a <__swsetup_r+0x1e>
 8006fac:	0751      	lsls	r1, r2, #29
 8006fae:	d512      	bpl.n	8006fd6 <__swsetup_r+0x7a>
 8006fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fb2:	b141      	cbz	r1, 8006fc6 <__swsetup_r+0x6a>
 8006fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fb8:	4299      	cmp	r1, r3
 8006fba:	d002      	beq.n	8006fc2 <__swsetup_r+0x66>
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f000 fa19 	bl	80073f4 <_free_r>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6063      	str	r3, [r4, #4]
 8006fd2:	6923      	ldr	r3, [r4, #16]
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	f043 0308 	orr.w	r3, r3, #8
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	b94b      	cbnz	r3, 8006ff6 <__swsetup_r+0x9a>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fec:	d003      	beq.n	8006ff6 <__swsetup_r+0x9a>
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f000 f9bf 	bl	8007374 <__smakebuf_r>
 8006ff6:	89a2      	ldrh	r2, [r4, #12]
 8006ff8:	f012 0301 	ands.w	r3, r2, #1
 8006ffc:	d00c      	beq.n	8007018 <__swsetup_r+0xbc>
 8006ffe:	2300      	movs	r3, #0
 8007000:	60a3      	str	r3, [r4, #8]
 8007002:	6963      	ldr	r3, [r4, #20]
 8007004:	425b      	negs	r3, r3
 8007006:	61a3      	str	r3, [r4, #24]
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	b953      	cbnz	r3, 8007022 <__swsetup_r+0xc6>
 800700c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007010:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007014:	d1ba      	bne.n	8006f8c <__swsetup_r+0x30>
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	0792      	lsls	r2, r2, #30
 800701a:	bf58      	it	pl
 800701c:	6963      	ldrpl	r3, [r4, #20]
 800701e:	60a3      	str	r3, [r4, #8]
 8007020:	e7f2      	b.n	8007008 <__swsetup_r+0xac>
 8007022:	2000      	movs	r0, #0
 8007024:	e7f7      	b.n	8007016 <__swsetup_r+0xba>
 8007026:	bf00      	nop
 8007028:	20000014 	.word	0x20000014
 800702c:	08007790 	.word	0x08007790
 8007030:	080077b0 	.word	0x080077b0
 8007034:	08007770 	.word	0x08007770

08007038 <__sflush_r>:
 8007038:	898a      	ldrh	r2, [r1, #12]
 800703a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	4605      	mov	r5, r0
 8007040:	0710      	lsls	r0, r2, #28
 8007042:	460c      	mov	r4, r1
 8007044:	d458      	bmi.n	80070f8 <__sflush_r+0xc0>
 8007046:	684b      	ldr	r3, [r1, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	dc05      	bgt.n	8007058 <__sflush_r+0x20>
 800704c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	dc02      	bgt.n	8007058 <__sflush_r+0x20>
 8007052:	2000      	movs	r0, #0
 8007054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800705a:	2e00      	cmp	r6, #0
 800705c:	d0f9      	beq.n	8007052 <__sflush_r+0x1a>
 800705e:	2300      	movs	r3, #0
 8007060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007064:	682f      	ldr	r7, [r5, #0]
 8007066:	6a21      	ldr	r1, [r4, #32]
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	d032      	beq.n	80070d2 <__sflush_r+0x9a>
 800706c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	075a      	lsls	r2, r3, #29
 8007072:	d505      	bpl.n	8007080 <__sflush_r+0x48>
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	1ac0      	subs	r0, r0, r3
 8007078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800707a:	b10b      	cbz	r3, 8007080 <__sflush_r+0x48>
 800707c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800707e:	1ac0      	subs	r0, r0, r3
 8007080:	2300      	movs	r3, #0
 8007082:	4602      	mov	r2, r0
 8007084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007086:	6a21      	ldr	r1, [r4, #32]
 8007088:	4628      	mov	r0, r5
 800708a:	47b0      	blx	r6
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	d106      	bne.n	80070a0 <__sflush_r+0x68>
 8007092:	6829      	ldr	r1, [r5, #0]
 8007094:	291d      	cmp	r1, #29
 8007096:	d848      	bhi.n	800712a <__sflush_r+0xf2>
 8007098:	4a29      	ldr	r2, [pc, #164]	; (8007140 <__sflush_r+0x108>)
 800709a:	40ca      	lsrs	r2, r1
 800709c:	07d6      	lsls	r6, r2, #31
 800709e:	d544      	bpl.n	800712a <__sflush_r+0xf2>
 80070a0:	2200      	movs	r2, #0
 80070a2:	6062      	str	r2, [r4, #4]
 80070a4:	04d9      	lsls	r1, r3, #19
 80070a6:	6922      	ldr	r2, [r4, #16]
 80070a8:	6022      	str	r2, [r4, #0]
 80070aa:	d504      	bpl.n	80070b6 <__sflush_r+0x7e>
 80070ac:	1c42      	adds	r2, r0, #1
 80070ae:	d101      	bne.n	80070b4 <__sflush_r+0x7c>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b903      	cbnz	r3, 80070b6 <__sflush_r+0x7e>
 80070b4:	6560      	str	r0, [r4, #84]	; 0x54
 80070b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070b8:	602f      	str	r7, [r5, #0]
 80070ba:	2900      	cmp	r1, #0
 80070bc:	d0c9      	beq.n	8007052 <__sflush_r+0x1a>
 80070be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070c2:	4299      	cmp	r1, r3
 80070c4:	d002      	beq.n	80070cc <__sflush_r+0x94>
 80070c6:	4628      	mov	r0, r5
 80070c8:	f000 f994 	bl	80073f4 <_free_r>
 80070cc:	2000      	movs	r0, #0
 80070ce:	6360      	str	r0, [r4, #52]	; 0x34
 80070d0:	e7c0      	b.n	8007054 <__sflush_r+0x1c>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b0      	blx	r6
 80070d8:	1c41      	adds	r1, r0, #1
 80070da:	d1c8      	bne.n	800706e <__sflush_r+0x36>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0c5      	beq.n	800706e <__sflush_r+0x36>
 80070e2:	2b1d      	cmp	r3, #29
 80070e4:	d001      	beq.n	80070ea <__sflush_r+0xb2>
 80070e6:	2b16      	cmp	r3, #22
 80070e8:	d101      	bne.n	80070ee <__sflush_r+0xb6>
 80070ea:	602f      	str	r7, [r5, #0]
 80070ec:	e7b1      	b.n	8007052 <__sflush_r+0x1a>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	e7ad      	b.n	8007054 <__sflush_r+0x1c>
 80070f8:	690f      	ldr	r7, [r1, #16]
 80070fa:	2f00      	cmp	r7, #0
 80070fc:	d0a9      	beq.n	8007052 <__sflush_r+0x1a>
 80070fe:	0793      	lsls	r3, r2, #30
 8007100:	680e      	ldr	r6, [r1, #0]
 8007102:	bf08      	it	eq
 8007104:	694b      	ldreq	r3, [r1, #20]
 8007106:	600f      	str	r7, [r1, #0]
 8007108:	bf18      	it	ne
 800710a:	2300      	movne	r3, #0
 800710c:	eba6 0807 	sub.w	r8, r6, r7
 8007110:	608b      	str	r3, [r1, #8]
 8007112:	f1b8 0f00 	cmp.w	r8, #0
 8007116:	dd9c      	ble.n	8007052 <__sflush_r+0x1a>
 8007118:	4643      	mov	r3, r8
 800711a:	463a      	mov	r2, r7
 800711c:	6a21      	ldr	r1, [r4, #32]
 800711e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007120:	4628      	mov	r0, r5
 8007122:	47b0      	blx	r6
 8007124:	2800      	cmp	r0, #0
 8007126:	dc06      	bgt.n	8007136 <__sflush_r+0xfe>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800712e:	81a3      	strh	r3, [r4, #12]
 8007130:	f04f 30ff 	mov.w	r0, #4294967295
 8007134:	e78e      	b.n	8007054 <__sflush_r+0x1c>
 8007136:	4407      	add	r7, r0
 8007138:	eba8 0800 	sub.w	r8, r8, r0
 800713c:	e7e9      	b.n	8007112 <__sflush_r+0xda>
 800713e:	bf00      	nop
 8007140:	20400001 	.word	0x20400001

08007144 <_fflush_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	690b      	ldr	r3, [r1, #16]
 8007148:	4605      	mov	r5, r0
 800714a:	460c      	mov	r4, r1
 800714c:	b1db      	cbz	r3, 8007186 <_fflush_r+0x42>
 800714e:	b118      	cbz	r0, 8007158 <_fflush_r+0x14>
 8007150:	6983      	ldr	r3, [r0, #24]
 8007152:	b90b      	cbnz	r3, 8007158 <_fflush_r+0x14>
 8007154:	f000 f860 	bl	8007218 <__sinit>
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <_fflush_r+0x48>)
 800715a:	429c      	cmp	r4, r3
 800715c:	d109      	bne.n	8007172 <_fflush_r+0x2e>
 800715e:	686c      	ldr	r4, [r5, #4]
 8007160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007164:	b17b      	cbz	r3, 8007186 <_fflush_r+0x42>
 8007166:	4621      	mov	r1, r4
 8007168:	4628      	mov	r0, r5
 800716a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800716e:	f7ff bf63 	b.w	8007038 <__sflush_r>
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <_fflush_r+0x4c>)
 8007174:	429c      	cmp	r4, r3
 8007176:	d101      	bne.n	800717c <_fflush_r+0x38>
 8007178:	68ac      	ldr	r4, [r5, #8]
 800717a:	e7f1      	b.n	8007160 <_fflush_r+0x1c>
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <_fflush_r+0x50>)
 800717e:	429c      	cmp	r4, r3
 8007180:	bf08      	it	eq
 8007182:	68ec      	ldreq	r4, [r5, #12]
 8007184:	e7ec      	b.n	8007160 <_fflush_r+0x1c>
 8007186:	2000      	movs	r0, #0
 8007188:	bd38      	pop	{r3, r4, r5, pc}
 800718a:	bf00      	nop
 800718c:	08007790 	.word	0x08007790
 8007190:	080077b0 	.word	0x080077b0
 8007194:	08007770 	.word	0x08007770

08007198 <std>:
 8007198:	2300      	movs	r3, #0
 800719a:	b510      	push	{r4, lr}
 800719c:	4604      	mov	r4, r0
 800719e:	e9c0 3300 	strd	r3, r3, [r0]
 80071a2:	6083      	str	r3, [r0, #8]
 80071a4:	8181      	strh	r1, [r0, #12]
 80071a6:	6643      	str	r3, [r0, #100]	; 0x64
 80071a8:	81c2      	strh	r2, [r0, #14]
 80071aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ae:	6183      	str	r3, [r0, #24]
 80071b0:	4619      	mov	r1, r3
 80071b2:	2208      	movs	r2, #8
 80071b4:	305c      	adds	r0, #92	; 0x5c
 80071b6:	f7ff fe12 	bl	8006dde <memset>
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <std+0x38>)
 80071bc:	6263      	str	r3, [r4, #36]	; 0x24
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <std+0x3c>)
 80071c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071c2:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <std+0x40>)
 80071c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <std+0x44>)
 80071c8:	6224      	str	r4, [r4, #32]
 80071ca:	6323      	str	r3, [r4, #48]	; 0x30
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	bf00      	nop
 80071d0:	08007565 	.word	0x08007565
 80071d4:	08007587 	.word	0x08007587
 80071d8:	080075bf 	.word	0x080075bf
 80071dc:	080075e3 	.word	0x080075e3

080071e0 <_cleanup_r>:
 80071e0:	4901      	ldr	r1, [pc, #4]	; (80071e8 <_cleanup_r+0x8>)
 80071e2:	f000 b885 	b.w	80072f0 <_fwalk_reent>
 80071e6:	bf00      	nop
 80071e8:	08007145 	.word	0x08007145

080071ec <__sfmoreglue>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	1e4a      	subs	r2, r1, #1
 80071f0:	2568      	movs	r5, #104	; 0x68
 80071f2:	4355      	muls	r5, r2
 80071f4:	460e      	mov	r6, r1
 80071f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071fa:	f000 f949 	bl	8007490 <_malloc_r>
 80071fe:	4604      	mov	r4, r0
 8007200:	b140      	cbz	r0, 8007214 <__sfmoreglue+0x28>
 8007202:	2100      	movs	r1, #0
 8007204:	e9c0 1600 	strd	r1, r6, [r0]
 8007208:	300c      	adds	r0, #12
 800720a:	60a0      	str	r0, [r4, #8]
 800720c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007210:	f7ff fde5 	bl	8006dde <memset>
 8007214:	4620      	mov	r0, r4
 8007216:	bd70      	pop	{r4, r5, r6, pc}

08007218 <__sinit>:
 8007218:	6983      	ldr	r3, [r0, #24]
 800721a:	b510      	push	{r4, lr}
 800721c:	4604      	mov	r4, r0
 800721e:	bb33      	cbnz	r3, 800726e <__sinit+0x56>
 8007220:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007224:	6503      	str	r3, [r0, #80]	; 0x50
 8007226:	4b12      	ldr	r3, [pc, #72]	; (8007270 <__sinit+0x58>)
 8007228:	4a12      	ldr	r2, [pc, #72]	; (8007274 <__sinit+0x5c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6282      	str	r2, [r0, #40]	; 0x28
 800722e:	4298      	cmp	r0, r3
 8007230:	bf04      	itt	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	6183      	streq	r3, [r0, #24]
 8007236:	f000 f81f 	bl	8007278 <__sfp>
 800723a:	6060      	str	r0, [r4, #4]
 800723c:	4620      	mov	r0, r4
 800723e:	f000 f81b 	bl	8007278 <__sfp>
 8007242:	60a0      	str	r0, [r4, #8]
 8007244:	4620      	mov	r0, r4
 8007246:	f000 f817 	bl	8007278 <__sfp>
 800724a:	2200      	movs	r2, #0
 800724c:	60e0      	str	r0, [r4, #12]
 800724e:	2104      	movs	r1, #4
 8007250:	6860      	ldr	r0, [r4, #4]
 8007252:	f7ff ffa1 	bl	8007198 <std>
 8007256:	2201      	movs	r2, #1
 8007258:	2109      	movs	r1, #9
 800725a:	68a0      	ldr	r0, [r4, #8]
 800725c:	f7ff ff9c 	bl	8007198 <std>
 8007260:	2202      	movs	r2, #2
 8007262:	2112      	movs	r1, #18
 8007264:	68e0      	ldr	r0, [r4, #12]
 8007266:	f7ff ff97 	bl	8007198 <std>
 800726a:	2301      	movs	r3, #1
 800726c:	61a3      	str	r3, [r4, #24]
 800726e:	bd10      	pop	{r4, pc}
 8007270:	0800776c 	.word	0x0800776c
 8007274:	080071e1 	.word	0x080071e1

08007278 <__sfp>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <__sfp+0x70>)
 800727c:	681e      	ldr	r6, [r3, #0]
 800727e:	69b3      	ldr	r3, [r6, #24]
 8007280:	4607      	mov	r7, r0
 8007282:	b913      	cbnz	r3, 800728a <__sfp+0x12>
 8007284:	4630      	mov	r0, r6
 8007286:	f7ff ffc7 	bl	8007218 <__sinit>
 800728a:	3648      	adds	r6, #72	; 0x48
 800728c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007290:	3b01      	subs	r3, #1
 8007292:	d503      	bpl.n	800729c <__sfp+0x24>
 8007294:	6833      	ldr	r3, [r6, #0]
 8007296:	b133      	cbz	r3, 80072a6 <__sfp+0x2e>
 8007298:	6836      	ldr	r6, [r6, #0]
 800729a:	e7f7      	b.n	800728c <__sfp+0x14>
 800729c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072a0:	b16d      	cbz	r5, 80072be <__sfp+0x46>
 80072a2:	3468      	adds	r4, #104	; 0x68
 80072a4:	e7f4      	b.n	8007290 <__sfp+0x18>
 80072a6:	2104      	movs	r1, #4
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ff9f 	bl	80071ec <__sfmoreglue>
 80072ae:	6030      	str	r0, [r6, #0]
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d1f1      	bne.n	8007298 <__sfp+0x20>
 80072b4:	230c      	movs	r3, #12
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	4604      	mov	r4, r0
 80072ba:	4620      	mov	r0, r4
 80072bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072be:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <__sfp+0x74>)
 80072c0:	6665      	str	r5, [r4, #100]	; 0x64
 80072c2:	e9c4 5500 	strd	r5, r5, [r4]
 80072c6:	60a5      	str	r5, [r4, #8]
 80072c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80072cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80072d0:	2208      	movs	r2, #8
 80072d2:	4629      	mov	r1, r5
 80072d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072d8:	f7ff fd81 	bl	8006dde <memset>
 80072dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072e4:	e7e9      	b.n	80072ba <__sfp+0x42>
 80072e6:	bf00      	nop
 80072e8:	0800776c 	.word	0x0800776c
 80072ec:	ffff0001 	.word	0xffff0001

080072f0 <_fwalk_reent>:
 80072f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f4:	4680      	mov	r8, r0
 80072f6:	4689      	mov	r9, r1
 80072f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072fc:	2600      	movs	r6, #0
 80072fe:	b914      	cbnz	r4, 8007306 <_fwalk_reent+0x16>
 8007300:	4630      	mov	r0, r6
 8007302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007306:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800730a:	3f01      	subs	r7, #1
 800730c:	d501      	bpl.n	8007312 <_fwalk_reent+0x22>
 800730e:	6824      	ldr	r4, [r4, #0]
 8007310:	e7f5      	b.n	80072fe <_fwalk_reent+0xe>
 8007312:	89ab      	ldrh	r3, [r5, #12]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d907      	bls.n	8007328 <_fwalk_reent+0x38>
 8007318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800731c:	3301      	adds	r3, #1
 800731e:	d003      	beq.n	8007328 <_fwalk_reent+0x38>
 8007320:	4629      	mov	r1, r5
 8007322:	4640      	mov	r0, r8
 8007324:	47c8      	blx	r9
 8007326:	4306      	orrs	r6, r0
 8007328:	3568      	adds	r5, #104	; 0x68
 800732a:	e7ee      	b.n	800730a <_fwalk_reent+0x1a>

0800732c <__swhatbuf_r>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	460e      	mov	r6, r1
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	2900      	cmp	r1, #0
 8007336:	b096      	sub	sp, #88	; 0x58
 8007338:	4614      	mov	r4, r2
 800733a:	461d      	mov	r5, r3
 800733c:	da07      	bge.n	800734e <__swhatbuf_r+0x22>
 800733e:	2300      	movs	r3, #0
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	89b3      	ldrh	r3, [r6, #12]
 8007344:	061a      	lsls	r2, r3, #24
 8007346:	d410      	bmi.n	800736a <__swhatbuf_r+0x3e>
 8007348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734c:	e00e      	b.n	800736c <__swhatbuf_r+0x40>
 800734e:	466a      	mov	r2, sp
 8007350:	f000 f96e 	bl	8007630 <_fstat_r>
 8007354:	2800      	cmp	r0, #0
 8007356:	dbf2      	blt.n	800733e <__swhatbuf_r+0x12>
 8007358:	9a01      	ldr	r2, [sp, #4]
 800735a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800735e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007362:	425a      	negs	r2, r3
 8007364:	415a      	adcs	r2, r3
 8007366:	602a      	str	r2, [r5, #0]
 8007368:	e7ee      	b.n	8007348 <__swhatbuf_r+0x1c>
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	2000      	movs	r0, #0
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	b016      	add	sp, #88	; 0x58
 8007372:	bd70      	pop	{r4, r5, r6, pc}

08007374 <__smakebuf_r>:
 8007374:	898b      	ldrh	r3, [r1, #12]
 8007376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007378:	079d      	lsls	r5, r3, #30
 800737a:	4606      	mov	r6, r0
 800737c:	460c      	mov	r4, r1
 800737e:	d507      	bpl.n	8007390 <__smakebuf_r+0x1c>
 8007380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	2301      	movs	r3, #1
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	b002      	add	sp, #8
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	ab01      	add	r3, sp, #4
 8007392:	466a      	mov	r2, sp
 8007394:	f7ff ffca 	bl	800732c <__swhatbuf_r>
 8007398:	9900      	ldr	r1, [sp, #0]
 800739a:	4605      	mov	r5, r0
 800739c:	4630      	mov	r0, r6
 800739e:	f000 f877 	bl	8007490 <_malloc_r>
 80073a2:	b948      	cbnz	r0, 80073b8 <__smakebuf_r+0x44>
 80073a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a8:	059a      	lsls	r2, r3, #22
 80073aa:	d4ef      	bmi.n	800738c <__smakebuf_r+0x18>
 80073ac:	f023 0303 	bic.w	r3, r3, #3
 80073b0:	f043 0302 	orr.w	r3, r3, #2
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	e7e3      	b.n	8007380 <__smakebuf_r+0xc>
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <__smakebuf_r+0x7c>)
 80073ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	6020      	str	r0, [r4, #0]
 80073c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	9b00      	ldr	r3, [sp, #0]
 80073c8:	6163      	str	r3, [r4, #20]
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	6120      	str	r0, [r4, #16]
 80073ce:	b15b      	cbz	r3, 80073e8 <__smakebuf_r+0x74>
 80073d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d4:	4630      	mov	r0, r6
 80073d6:	f000 f93d 	bl	8007654 <_isatty_r>
 80073da:	b128      	cbz	r0, 80073e8 <__smakebuf_r+0x74>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	431d      	orrs	r5, r3
 80073ec:	81a5      	strh	r5, [r4, #12]
 80073ee:	e7cd      	b.n	800738c <__smakebuf_r+0x18>
 80073f0:	080071e1 	.word	0x080071e1

080073f4 <_free_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	2900      	cmp	r1, #0
 80073fa:	d045      	beq.n	8007488 <_free_r+0x94>
 80073fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007400:	1f0c      	subs	r4, r1, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	bfb8      	it	lt
 8007406:	18e4      	addlt	r4, r4, r3
 8007408:	f000 f946 	bl	8007698 <__malloc_lock>
 800740c:	4a1f      	ldr	r2, [pc, #124]	; (800748c <_free_r+0x98>)
 800740e:	6813      	ldr	r3, [r2, #0]
 8007410:	4610      	mov	r0, r2
 8007412:	b933      	cbnz	r3, 8007422 <_free_r+0x2e>
 8007414:	6063      	str	r3, [r4, #4]
 8007416:	6014      	str	r4, [r2, #0]
 8007418:	4628      	mov	r0, r5
 800741a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800741e:	f000 b93c 	b.w	800769a <__malloc_unlock>
 8007422:	42a3      	cmp	r3, r4
 8007424:	d90c      	bls.n	8007440 <_free_r+0x4c>
 8007426:	6821      	ldr	r1, [r4, #0]
 8007428:	1862      	adds	r2, r4, r1
 800742a:	4293      	cmp	r3, r2
 800742c:	bf04      	itt	eq
 800742e:	681a      	ldreq	r2, [r3, #0]
 8007430:	685b      	ldreq	r3, [r3, #4]
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	bf04      	itt	eq
 8007436:	1852      	addeq	r2, r2, r1
 8007438:	6022      	streq	r2, [r4, #0]
 800743a:	6004      	str	r4, [r0, #0]
 800743c:	e7ec      	b.n	8007418 <_free_r+0x24>
 800743e:	4613      	mov	r3, r2
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	b10a      	cbz	r2, 8007448 <_free_r+0x54>
 8007444:	42a2      	cmp	r2, r4
 8007446:	d9fa      	bls.n	800743e <_free_r+0x4a>
 8007448:	6819      	ldr	r1, [r3, #0]
 800744a:	1858      	adds	r0, r3, r1
 800744c:	42a0      	cmp	r0, r4
 800744e:	d10b      	bne.n	8007468 <_free_r+0x74>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	4401      	add	r1, r0
 8007454:	1858      	adds	r0, r3, r1
 8007456:	4282      	cmp	r2, r0
 8007458:	6019      	str	r1, [r3, #0]
 800745a:	d1dd      	bne.n	8007418 <_free_r+0x24>
 800745c:	6810      	ldr	r0, [r2, #0]
 800745e:	6852      	ldr	r2, [r2, #4]
 8007460:	605a      	str	r2, [r3, #4]
 8007462:	4401      	add	r1, r0
 8007464:	6019      	str	r1, [r3, #0]
 8007466:	e7d7      	b.n	8007418 <_free_r+0x24>
 8007468:	d902      	bls.n	8007470 <_free_r+0x7c>
 800746a:	230c      	movs	r3, #12
 800746c:	602b      	str	r3, [r5, #0]
 800746e:	e7d3      	b.n	8007418 <_free_r+0x24>
 8007470:	6820      	ldr	r0, [r4, #0]
 8007472:	1821      	adds	r1, r4, r0
 8007474:	428a      	cmp	r2, r1
 8007476:	bf04      	itt	eq
 8007478:	6811      	ldreq	r1, [r2, #0]
 800747a:	6852      	ldreq	r2, [r2, #4]
 800747c:	6062      	str	r2, [r4, #4]
 800747e:	bf04      	itt	eq
 8007480:	1809      	addeq	r1, r1, r0
 8007482:	6021      	streq	r1, [r4, #0]
 8007484:	605c      	str	r4, [r3, #4]
 8007486:	e7c7      	b.n	8007418 <_free_r+0x24>
 8007488:	bd38      	pop	{r3, r4, r5, pc}
 800748a:	bf00      	nop
 800748c:	20020200 	.word	0x20020200

08007490 <_malloc_r>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	1ccd      	adds	r5, r1, #3
 8007494:	f025 0503 	bic.w	r5, r5, #3
 8007498:	3508      	adds	r5, #8
 800749a:	2d0c      	cmp	r5, #12
 800749c:	bf38      	it	cc
 800749e:	250c      	movcc	r5, #12
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	4606      	mov	r6, r0
 80074a4:	db01      	blt.n	80074aa <_malloc_r+0x1a>
 80074a6:	42a9      	cmp	r1, r5
 80074a8:	d903      	bls.n	80074b2 <_malloc_r+0x22>
 80074aa:	230c      	movs	r3, #12
 80074ac:	6033      	str	r3, [r6, #0]
 80074ae:	2000      	movs	r0, #0
 80074b0:	bd70      	pop	{r4, r5, r6, pc}
 80074b2:	f000 f8f1 	bl	8007698 <__malloc_lock>
 80074b6:	4a21      	ldr	r2, [pc, #132]	; (800753c <_malloc_r+0xac>)
 80074b8:	6814      	ldr	r4, [r2, #0]
 80074ba:	4621      	mov	r1, r4
 80074bc:	b991      	cbnz	r1, 80074e4 <_malloc_r+0x54>
 80074be:	4c20      	ldr	r4, [pc, #128]	; (8007540 <_malloc_r+0xb0>)
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	b91b      	cbnz	r3, 80074cc <_malloc_r+0x3c>
 80074c4:	4630      	mov	r0, r6
 80074c6:	f000 f83d 	bl	8007544 <_sbrk_r>
 80074ca:	6020      	str	r0, [r4, #0]
 80074cc:	4629      	mov	r1, r5
 80074ce:	4630      	mov	r0, r6
 80074d0:	f000 f838 	bl	8007544 <_sbrk_r>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d124      	bne.n	8007522 <_malloc_r+0x92>
 80074d8:	230c      	movs	r3, #12
 80074da:	6033      	str	r3, [r6, #0]
 80074dc:	4630      	mov	r0, r6
 80074de:	f000 f8dc 	bl	800769a <__malloc_unlock>
 80074e2:	e7e4      	b.n	80074ae <_malloc_r+0x1e>
 80074e4:	680b      	ldr	r3, [r1, #0]
 80074e6:	1b5b      	subs	r3, r3, r5
 80074e8:	d418      	bmi.n	800751c <_malloc_r+0x8c>
 80074ea:	2b0b      	cmp	r3, #11
 80074ec:	d90f      	bls.n	800750e <_malloc_r+0x7e>
 80074ee:	600b      	str	r3, [r1, #0]
 80074f0:	50cd      	str	r5, [r1, r3]
 80074f2:	18cc      	adds	r4, r1, r3
 80074f4:	4630      	mov	r0, r6
 80074f6:	f000 f8d0 	bl	800769a <__malloc_unlock>
 80074fa:	f104 000b 	add.w	r0, r4, #11
 80074fe:	1d23      	adds	r3, r4, #4
 8007500:	f020 0007 	bic.w	r0, r0, #7
 8007504:	1ac3      	subs	r3, r0, r3
 8007506:	d0d3      	beq.n	80074b0 <_malloc_r+0x20>
 8007508:	425a      	negs	r2, r3
 800750a:	50e2      	str	r2, [r4, r3]
 800750c:	e7d0      	b.n	80074b0 <_malloc_r+0x20>
 800750e:	428c      	cmp	r4, r1
 8007510:	684b      	ldr	r3, [r1, #4]
 8007512:	bf16      	itet	ne
 8007514:	6063      	strne	r3, [r4, #4]
 8007516:	6013      	streq	r3, [r2, #0]
 8007518:	460c      	movne	r4, r1
 800751a:	e7eb      	b.n	80074f4 <_malloc_r+0x64>
 800751c:	460c      	mov	r4, r1
 800751e:	6849      	ldr	r1, [r1, #4]
 8007520:	e7cc      	b.n	80074bc <_malloc_r+0x2c>
 8007522:	1cc4      	adds	r4, r0, #3
 8007524:	f024 0403 	bic.w	r4, r4, #3
 8007528:	42a0      	cmp	r0, r4
 800752a:	d005      	beq.n	8007538 <_malloc_r+0xa8>
 800752c:	1a21      	subs	r1, r4, r0
 800752e:	4630      	mov	r0, r6
 8007530:	f000 f808 	bl	8007544 <_sbrk_r>
 8007534:	3001      	adds	r0, #1
 8007536:	d0cf      	beq.n	80074d8 <_malloc_r+0x48>
 8007538:	6025      	str	r5, [r4, #0]
 800753a:	e7db      	b.n	80074f4 <_malloc_r+0x64>
 800753c:	20020200 	.word	0x20020200
 8007540:	20020204 	.word	0x20020204

08007544 <_sbrk_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4c06      	ldr	r4, [pc, #24]	; (8007560 <_sbrk_r+0x1c>)
 8007548:	2300      	movs	r3, #0
 800754a:	4605      	mov	r5, r0
 800754c:	4608      	mov	r0, r1
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	f7f9 fcb0 	bl	8000eb4 <_sbrk>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_sbrk_r+0x1a>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	b103      	cbz	r3, 800755e <_sbrk_r+0x1a>
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20020384 	.word	0x20020384

08007564 <__sread>:
 8007564:	b510      	push	{r4, lr}
 8007566:	460c      	mov	r4, r1
 8007568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756c:	f000 f896 	bl	800769c <_read_r>
 8007570:	2800      	cmp	r0, #0
 8007572:	bfab      	itete	ge
 8007574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007576:	89a3      	ldrhlt	r3, [r4, #12]
 8007578:	181b      	addge	r3, r3, r0
 800757a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800757e:	bfac      	ite	ge
 8007580:	6563      	strge	r3, [r4, #84]	; 0x54
 8007582:	81a3      	strhlt	r3, [r4, #12]
 8007584:	bd10      	pop	{r4, pc}

08007586 <__swrite>:
 8007586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	461f      	mov	r7, r3
 800758c:	898b      	ldrh	r3, [r1, #12]
 800758e:	05db      	lsls	r3, r3, #23
 8007590:	4605      	mov	r5, r0
 8007592:	460c      	mov	r4, r1
 8007594:	4616      	mov	r6, r2
 8007596:	d505      	bpl.n	80075a4 <__swrite+0x1e>
 8007598:	2302      	movs	r3, #2
 800759a:	2200      	movs	r2, #0
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	f000 f868 	bl	8007674 <_lseek_r>
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	4632      	mov	r2, r6
 80075b2:	463b      	mov	r3, r7
 80075b4:	4628      	mov	r0, r5
 80075b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ba:	f000 b817 	b.w	80075ec <_write_r>

080075be <__sseek>:
 80075be:	b510      	push	{r4, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c6:	f000 f855 	bl	8007674 <_lseek_r>
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	bf15      	itete	ne
 80075d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075da:	81a3      	strheq	r3, [r4, #12]
 80075dc:	bf18      	it	ne
 80075de:	81a3      	strhne	r3, [r4, #12]
 80075e0:	bd10      	pop	{r4, pc}

080075e2 <__sclose>:
 80075e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e6:	f000 b813 	b.w	8007610 <_close_r>
	...

080075ec <_write_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4c07      	ldr	r4, [pc, #28]	; (800760c <_write_r+0x20>)
 80075f0:	4605      	mov	r5, r0
 80075f2:	4608      	mov	r0, r1
 80075f4:	4611      	mov	r1, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	6022      	str	r2, [r4, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7f9 f800 	bl	8000600 <_write>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_write_r+0x1e>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	b103      	cbz	r3, 800760a <_write_r+0x1e>
 8007608:	602b      	str	r3, [r5, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20020384 	.word	0x20020384

08007610 <_close_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4c06      	ldr	r4, [pc, #24]	; (800762c <_close_r+0x1c>)
 8007614:	2300      	movs	r3, #0
 8007616:	4605      	mov	r5, r0
 8007618:	4608      	mov	r0, r1
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	f7f9 fc15 	bl	8000e4a <_close>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_close_r+0x1a>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	b103      	cbz	r3, 800762a <_close_r+0x1a>
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	20020384 	.word	0x20020384

08007630 <_fstat_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4c07      	ldr	r4, [pc, #28]	; (8007650 <_fstat_r+0x20>)
 8007634:	2300      	movs	r3, #0
 8007636:	4605      	mov	r5, r0
 8007638:	4608      	mov	r0, r1
 800763a:	4611      	mov	r1, r2
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	f7f9 fc10 	bl	8000e62 <_fstat>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d102      	bne.n	800764c <_fstat_r+0x1c>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	b103      	cbz	r3, 800764c <_fstat_r+0x1c>
 800764a:	602b      	str	r3, [r5, #0]
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	20020384 	.word	0x20020384

08007654 <_isatty_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4c06      	ldr	r4, [pc, #24]	; (8007670 <_isatty_r+0x1c>)
 8007658:	2300      	movs	r3, #0
 800765a:	4605      	mov	r5, r0
 800765c:	4608      	mov	r0, r1
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	f7f9 fc0f 	bl	8000e82 <_isatty>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_isatty_r+0x1a>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	b103      	cbz	r3, 800766e <_isatty_r+0x1a>
 800766c:	602b      	str	r3, [r5, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	20020384 	.word	0x20020384

08007674 <_lseek_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4c07      	ldr	r4, [pc, #28]	; (8007694 <_lseek_r+0x20>)
 8007678:	4605      	mov	r5, r0
 800767a:	4608      	mov	r0, r1
 800767c:	4611      	mov	r1, r2
 800767e:	2200      	movs	r2, #0
 8007680:	6022      	str	r2, [r4, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	f7f9 fc08 	bl	8000e98 <_lseek>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_lseek_r+0x1e>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	b103      	cbz	r3, 8007692 <_lseek_r+0x1e>
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	20020384 	.word	0x20020384

08007698 <__malloc_lock>:
 8007698:	4770      	bx	lr

0800769a <__malloc_unlock>:
 800769a:	4770      	bx	lr

0800769c <_read_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4c07      	ldr	r4, [pc, #28]	; (80076bc <_read_r+0x20>)
 80076a0:	4605      	mov	r5, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	6022      	str	r2, [r4, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7f9 fbb0 	bl	8000e10 <_read>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_read_r+0x1e>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_read_r+0x1e>
 80076b8:	602b      	str	r3, [r5, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	20020384 	.word	0x20020384

080076c0 <_init>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr

080076cc <_fini>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr
